'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fs = require('fs');

module.exports = {
  eraseDirectories: function eraseDirectories(path) {
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _require, createConfirmationPrompt, removeFolder, answer;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _require = require('../helpers'), createConfirmationPrompt = _require.createConfirmationPrompt, removeFolder = _require.removeFolder;

              if (!fs.existsSync(path)) {
                _context.next = 10;
                break;
              }

              _context.next = 4;
              return createConfirmationPrompt("It will erase data in ".concat(path, ". Continue?"));

            case 4:
              answer = _context.sent;

              if (!answer) {
                _context.next = 9;
                break;
              }

              _context.next = 8;
              return removeFolder(path);

            case 8:
              return _context.abrupt("return");

            case 9:
              return _context.abrupt("return", Promise.reject('OK, will not delete existing folder.'));

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  }
};