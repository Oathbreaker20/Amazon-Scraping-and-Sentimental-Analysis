'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var path = require('path');

var fs = require('fs');

var Receiver = require('./receiver');

var helpers = require('../helpers');

var config = require('../config');

var RepoReceiver = /*#__PURE__*/function (_Receiver) {
  _inherits(RepoReceiver, _Receiver);

  var _super = _createSuper(RepoReceiver);

  function RepoReceiver(context) {
    var _this;

    _classCallCheck(this, RepoReceiver);

    _this = _super.call(this, context);

    _this.context.authenticateUser();

    _this.options = {
      hostname: config.host,
      path: '/repo/create',
      headers: {
        Authorization: "Bearer ".concat(_this.context.userToken),
        'Content-Type': 'application/json'
      }
    };
    return _this;
  }

  _createClass(RepoReceiver, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var projectName, created, url;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._getProjectName();

              case 2:
                projectName = _context.sent;
                _context.next = 5;
                return helpers.createJenkinsfile(process.cwd(), this.context.packageJsonConfig.scripts && this.context.packageJsonConfig.scripts.test);

              case 5:
                created = _context.sent;

                if (created) {
                  this.result.liveTextLine('Created required file: Jenkinsfile. Proceeding...');
                }

                _context.next = 9;
                return this._createGitLabPipeline(projectName);

              case 9:
                url = _context.sent;
                _context.prev = 10;
                _context.next = 13;
                return this._initializeRepository(url);

              case 13:
                _context.next = 18;
                break;

              case 15:
                _context.prev = 15;
                _context.t0 = _context["catch"](10);

                if (_context.t0 && _context.t0.message && _context.t0.message.toLowerCase().indexOf('authentication failed') !== -1) {
                  this.result.addAlert('blue', 'Note', 'There were some authentication problems. Please make sure you provided correct username and password. If you are certain that the credentials are correct and still see this message, please log into your MDB Go GitLab account to activate it here: https://git.mdbgo.com/. Once you do that run the following command:');
                  this.result.addAlert('turquoise', '\tgit push -u origin master', '');
                } else {
                  this.result.addAlert('red', 'Error', "Could not create repository: ".concat(_context.t0.message));
                }

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[10, 15]]);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "_getProjectName",
    value: function () {
      var _getProjectName2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var projectName, result, packageJsonEmpty;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                projectName = this.context.mdbConfig.getValue('projectName') || this.context.packageJsonConfig.name;

                if (projectName) {
                  _context2.next = 19;
                  break;
                }

                this.result.liveTextLine('package.json file is required. Creating...');
                _context2.prev = 3;
                _context2.next = 6;
                return this._createPackageJson();

              case 6:
                result = _context2.sent;

                this.context._loadPackageJsonConfig();

                projectName = this.context.packageJsonConfig.name;
                this.result.liveTextLine(result);
                _context2.next = 16;
                break;

              case 12:
                _context2.prev = 12;
                _context2.t0 = _context2["catch"](3);
                this.result.addAlert('red', 'Error', _context2.t0);
                return _context2.abrupt("return");

              case 16:
                packageJsonEmpty = projectName === undefined;

                if (!packageJsonEmpty) {
                  _context2.next = 19;
                  break;
                }

                throw new Error('package.json file is required.');

              case 19:
                return _context2.abrupt("return", projectName);

              case 20:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[3, 12]]);
      }));

      function _getProjectName() {
        return _getProjectName2.apply(this, arguments);
      }

      return _getProjectName;
    }()
  }, {
    key: "_createPackageJson",
    value: function () {
      var _createPackageJson2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.context.loadPackageManager();

              case 2:
                return _context3.abrupt("return", this.context.packageManager.init());

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _createPackageJson() {
        return _createPackageJson2.apply(this, arguments);
      }

      return _createPackageJson;
    }()
  }, {
    key: "_createGitLabPipeline",
    value: function () {
      var _createGitLabPipeline2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(projectName) {
        var _yield$this$http$post, createResult, _JSON$parse, name, url, webhook, saved, pipeline;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.options.data = JSON.stringify({
                  projectName: projectName
                });
                _context4.next = 3;
                return this.http.post(this.options);

              case 3:
                _yield$this$http$post = _context4.sent;
                createResult = _yield$this$http$post.body;
                _JSON$parse = JSON.parse(createResult), name = _JSON$parse.name, url = _JSON$parse.url, webhook = _JSON$parse.webhook, saved = _JSON$parse.saved, pipeline = _JSON$parse.pipeline;
                if (webhook === false) this.result.liveAlert('red', 'Error', 'GitLab webhook not added.');
                if (saved === false) this.result.liveAlert('red', 'Error', 'Project data not saved.');
                if (pipeline === false) this.result.liveAlert('red', 'Error', 'Jenkins pipeline not created.');
                if (webhook === false || saved === false || pipeline === false) this.result.addAlert('red', 'Error', 'There were some errors. Please write to our support https://mdbootstrap.com/support/');
                this.result.addAlert('green', '\nSuccess', "Project ".concat(name, " successfully created. Repository url: ").concat(url, "\n"));
                return _context4.abrupt("return", url);

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function _createGitLabPipeline(_x) {
        return _createGitLabPipeline2.apply(this, arguments);
      }

      return _createGitLabPipeline;
    }()
  }, {
    key: "_initializeRepository",
    value: function () {
      var _initializeRepository2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(url) {
        var gitConfigPath;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                gitConfigPath = path.join(process.cwd(), '.git', 'config');

                if (!fs.existsSync(gitConfigPath)) {
                  _context5.next = 8;
                  break;
                }

                _context5.next = 4;
                return this.git.setOrigin(url);

              case 4:
                _context5.next = 6;
                return this.git.push('master');

              case 6:
                _context5.next = 16;
                break;

              case 8:
                _context5.next = 10;
                return this.git.init();

              case 10:
                _context5.next = 12;
                return this.git.addOrigin(url);

              case 12:
                _context5.next = 14;
                return this.git.commit('.', 'Initial commit');

              case 14:
                _context5.next = 16;
                return this.git.push('master');

              case 16:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function _initializeRepository(_x2) {
        return _initializeRepository2.apply(this, arguments);
      }

      return _initializeRepository;
    }()
  }]);

  return RepoReceiver;
}(Receiver);

module.exports = RepoReceiver;