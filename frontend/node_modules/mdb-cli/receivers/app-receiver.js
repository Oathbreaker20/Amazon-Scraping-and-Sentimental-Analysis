'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Receiver = require('./receiver');

var AppReceiver = /*#__PURE__*/function (_Receiver) {
  _inherits(AppReceiver, _Receiver);

  var _super = _createSuper(AppReceiver);

  function AppReceiver(context) {
    var _this;

    _classCallCheck(this, AppReceiver);

    _this = _super.call(this, context);
    _this.flags = _this.context.getParsedFlags();
    return _this;
  }

  _createClass(AppReceiver, [{
    key: "getHelp",
    value: function getHelp() {
      this.result.addTextLine('\nUsage: mdb [entity] [command] [arg] [flags]\n');
      this.result.addTextLine('Command line interface for MDB environment.\n');
      this.result.addTextLine('Entities:');
      this.result.addTable([{
        Entity: 'starter',
        Description: 'Manage all kinds of starter projects: frontend & backend'
      }, {
        Entity: 'backend',
        Description: 'Manage backend projects'
      }, {
        Entity: 'wordpress',
        Description: 'Manage WordPress projects'
      }, {
        Entity: 'frontend',
        Description: 'Manage frontend projects'
      }, {
        Entity: 'blank',
        Description: 'Manage custom (frontend) projects'
      }, {
        Entity: 'database',
        Description: 'Manage databases'
      }, {
        Entity: 'repo',
        Description: 'Manage GitLab repository'
      }, {
        Entity: 'config',
        Description: 'Manage project configuration'
      }, {
        Entity: 'order',
        Description: 'Manage created orders'
      }, {
        Entity: 'app',
        Description: 'Manage MDB CLI app'
      }, {
        Entity: 'user',
        Description: 'Manage users'
      }]);
      this.result.addTextLine('\nCommands:');
      this.result.addTable([{
        Command: 'help',
        Description: 'Display this help info. Use with entities: <none>, app (default)'
      }, {
        Command: 'update',
        Description: 'Update MDB CLI app to the latest version. Use with entities: <none>, app (default)'
      }, {
        Command: 'version',
        Description: 'Check currently installed version of MDB CLI. Use with entities: <none>, app (default)'
      }, {
        Command: 'register',
        Description: 'Create a new MDB account. Use with entities: <none>, user (default)'
      }, {
        Command: 'login',
        Description: 'Log in to your MDB account. Use with entities: <none>, user (default)'
      }, {
        Command: 'logout',
        Description: 'Log out from MDB CLI. Use with entities: <none>, user (default)'
      }, {
        Command: 'ls',
        Description: 'List entity content. Use with entities: <none>, starter, frontend (default), backend, database, wordpress, order'
      }, {
        Command: 'init',
        Description: 'Create something of entity type. Use with entities: <none>, starter, blank, frontend (default), backend, wordpress, database, repo'
      }, {
        Command: 'publish',
        Description: 'Publish project. Use with entities: <none>, frontend (default), backend, wordpress'
      }, {
        Command: 'get',
        Description: 'Download a project to the current directory. Use with entities: backend, frontend, wordpress'
      }, {
        Command: 'info',
        Description: 'Display info about entity. Use with entities: backend, database'
      }, {
        Command: 'delete',
        Description: 'Completely delete an entity. Use with entities: backend, database, frontend, wordpress'
      }, {
        Command: 'kill',
        Description: 'Stop a project. Use with entities: backend'
      }, {
        Command: 'destroy',
        Description: 'Alias for `kill`'
      }, {
        Command: 'logs',
        Description: 'Display logs of a project. Use with entities: backend'
      }, {
        Command: 'rename',
        Description: 'Change the project name locally and on public server. Use with entities: <none>'
      }]);
      this.result.addTextLine('\nAliases:');
      this.result.addTable([{
        Command: 'mdb starters',
        Description: 'The same as: mdb starter ls'
      }, {
        Command: 'mdb orders',
        Description: 'The same as: mdb order ls'
      }]);
      this.result.addTextLine('\nVisit https://mdbootstrap.com/docs/standard/cli/reference/ for full command reference.');
    }
  }, {
    key: "getVersion",
    value: function getVersion() {
      var _require = require('../package.json'),
          version = _require.version;

      this.result.addTextLine('Version: ' + version);
    }
  }, {
    key: "updateApp",
    value: function () {
      var _updateApp = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var result;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.context.loadPackageManager();

              case 2:
                _context.prev = 2;
                _context.next = 5;
                return this.context.packageManager.update();

              case 5:
                result = _context.sent;
                this.result.addAlert('green', 'Success', result);
                _context.next = 12;
                break;

              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](2);
                this.result.addAlert('red', 'Error:', _context.t0);

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[2, 9]]);
      }));

      function updateApp() {
        return _updateApp.apply(this, arguments);
      }

      return updateApp;
    }()
  }]);

  return AppReceiver;
}(Receiver);

module.exports = AppReceiver;