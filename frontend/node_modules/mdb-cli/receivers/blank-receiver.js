'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Receiver = require('./receiver');

var helpers = require('../helpers');

var path = require('path');

var fs = require('fs');

var BlankReceiver = /*#__PURE__*/function (_Receiver) {
  _inherits(BlankReceiver, _Receiver);

  var _super = _createSuper(BlankReceiver);

  function BlankReceiver(context) {
    var _this;

    _classCallCheck(this, BlankReceiver);

    _this = _super.call(this, context);
    _this.projectName = '';

    _this.context.registerFlagExpansions({
      '-n': '--name'
    });

    _this.flags = _this.context.getParsedFlags();
    return _this;
  }

  _createClass(BlankReceiver, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var initInCurrentFolder, projectPath, result;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                initInCurrentFolder = this.context.args.some(function (arg) {
                  return arg === '.';
                });

                if (!(initInCurrentFolder && fs.readdirSync(process.cwd()).length !== 0)) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", this.result.addAlert('red', 'Error', 'Destination path `.` already exists and is not an empty directory.'));

              case 3:
                projectPath = process.cwd();

                if (initInCurrentFolder) {
                  _context.next = 23;
                  break;
                }

                _context.t0 = this.flags.name;

                if (_context.t0) {
                  _context.next = 10;
                  break;
                }

                _context.next = 9;
                return helpers.createTextPrompt('Enter project name', 'Project name must not be empty.');

              case 9:
                _context.t0 = _context.sent;

              case 10:
                this.projectName = _context.t0;
                _context.next = 13;
                return this.checkProjectNameExists();

              case 13:
                projectPath = path.join(process.cwd(), this.projectName);
                _context.prev = 14;
                _context.next = 17;
                return helpers.eraseDirectories(projectPath);

              case 17:
                _context.next = 22;
                break;

              case 19:
                _context.prev = 19;
                _context.t1 = _context["catch"](14);
                return _context.abrupt("return", this.result.addAlert('red', 'Error', _context.t1));

              case 22:
                fs.mkdirSync(projectPath);

              case 23:
                _context.next = 25;
                return this.createPackageJson(projectPath);

              case 25:
                result = _context.sent;

                this.context._loadPackageJsonConfig(projectPath);

                _context.prev = 27;
                _context.next = 30;
                return helpers.createJenkinsfile(projectPath, this.context.packageJsonConfig.scripts && this.context.packageJsonConfig.scripts.test);

              case 30:
                _context.next = 35;
                break;

              case 32:
                _context.prev = 32;
                _context.t2 = _context["catch"](27);
                return _context.abrupt("return", this.result.addAlert('red', 'Error', _context.t2));

              case 35:
                this.context.mdbConfig.setValue('projectName', this.context.packageJsonConfig.name);
                this.context.mdbConfig.setValue('hash', helpers.generateRandomString());
                this.context.mdbConfig.save(projectPath);
                this.result.addAlert('green', 'Success', "Your project was initialized in ".concat(projectPath));

              case 39:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[14, 19], [27, 32]]);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "checkProjectNameExists",
    value: function () {
      var _checkProjectNameExists = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var projectPath, confirmed;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                projectPath = path.join(process.cwd(), this.projectName);

                if (!fs.existsSync(projectPath)) {
                  _context2.next = 11;
                  break;
                }

                _context2.next = 4;
                return helpers.createConfirmationPrompt("Folder ".concat(this.projectName, " already exists, do you want to rename project you are creating now?"), true);

              case 4:
                confirmed = _context2.sent;

                if (!confirmed) {
                  _context2.next = 11;
                  break;
                }

                _context2.next = 8;
                return helpers.createTextPrompt('Enter new project name', 'Project name must not be empty.');

              case 8:
                this.projectName = _context2.sent;
                _context2.next = 11;
                return this.checkProjectNameExists();

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function checkProjectNameExists() {
        return _checkProjectNameExists.apply(this, arguments);
      }

      return checkProjectNameExists;
    }()
  }, {
    key: "createPackageJson",
    value: function () {
      var _createPackageJson = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(cwd) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.context.loadPackageManager();

              case 2:
                return _context3.abrupt("return", this.context.packageManager.init(cwd));

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function createPackageJson(_x) {
        return _createPackageJson.apply(this, arguments);
      }

      return createPackageJson;
    }()
  }]);

  return BlankReceiver;
}(Receiver);

module.exports = BlankReceiver;