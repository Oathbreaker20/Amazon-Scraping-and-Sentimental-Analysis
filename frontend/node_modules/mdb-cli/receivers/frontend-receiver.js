'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('inquirer'),
    Separator = _require.Separator;

var open = require('open');

var config = require('../config');

var Receiver = require('./receiver');

var ProjectStatus = require('../models/project-status');

var CliStatus = require('../models/cli-status');

var FtpPublishStrategy = require('./strategies/publish/ftp-publish-strategy');

var PipelinePublishStrategy = require('./strategies/publish/pipeline-publish-strategy');

var helpers = require('../helpers');

var path = require('path');

var fs = require('fs');

var FrontendReceiver = /*#__PURE__*/function (_Receiver) {
  _inherits(FrontendReceiver, _Receiver);

  var _super = _createSuper(FrontendReceiver);

  function FrontendReceiver(context) {
    var _this;

    _classCallCheck(this, FrontendReceiver);

    _this = _super.call(this, context);

    _this.context.authenticateUser();

    _this.options = {
      hostname: config.host,
      headers: {
        Authorization: "Bearer ".concat(_this.context.userToken)
      }
    };
    _this.projectName = '';
    _this.starterCode = '';

    _this.context.registerNonArgFlags(['ftp', 'open', 'test', 'ftp-only', 'help', 'override']);

    _this.context.registerFlagExpansions({
      '-t': '--test',
      '-o': '--open',
      '-n': '--name',
      '-h': '--help'
    });

    _this.flags = _this.context.getParsedFlags();
    _this.args = _this.context.args;
    _this._publishRetries = 0;
    return _this;
  }

  _createClass(FrontendReceiver, [{
    key: "list",
    value: function () {
      var _list = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var projects;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.result.liveTextLine('Fetching frontend projects...');
                _context.next = 3;
                return this.getFrontendProjects();

              case 3:
                projects = _context.sent;

                if (projects.length) {
                  projects = projects.map(function (p) {
                    var deletedFromFTP = p.projectMeta.some(function (m) {
                      return m.metaKey === '_uploaded_to_ftp' && m.metaValue === '0';
                    });
                    var projectURL = p.domainName ? "https://".concat(p.domainName) : "https://".concat(config.projectsDomain, "/").concat(p.user.userNicename, "/").concat(p.projectName, "/");
                    return {
                      'Project Name': p.projectName,
                      'Project URL': deletedFromFTP ? 'Unavailable' : projectURL,
                      'Published': p.status === ProjectStatus.PUBLISHED ? new Date(p.publishDate).toLocaleString() : '-',
                      'Edited': new Date(p.editDate).toLocaleString(),
                      'Repository': p.repoUrl ? p.repoUrl : '-'
                    };
                  });
                  this.result.addTable(projects);
                } else {
                  this.result.addTextLine('You don\'t have any projects yet.');
                }

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function list() {
        return _list.apply(this, arguments);
      }

      return list;
    }()
  }, {
    key: "getFrontendProjects",
    value: function () {
      var _getFrontendProjects = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var result;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.options.path = '/project';
                _context2.next = 3;
                return this.http.get(this.options);

              case 3:
                result = _context2.sent;
                return _context2.abrupt("return", JSON.parse(result.body).filter(function (p) {
                  return [ProjectStatus.CREATED, ProjectStatus.PUBLISHED].includes(p.status);
                }).sort(function (a, b) {
                  return a.editDate < b.editDate;
                }));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getFrontendProjects() {
        return _getFrontendProjects.apply(this, arguments);
      }

      return getFrontendProjects;
    }()
  }, {
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(starterCode) {
        var initInCurrentFolder, projectPath, options, choices, initResult;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                initInCurrentFolder = this.context.args.some(function (arg) {
                  return arg === '.';
                });

                if (!(initInCurrentFolder && fs.readdirSync(process.cwd()).length !== 0)) {
                  _context3.next = 3;
                  break;
                }

                return _context3.abrupt("return", this.result.addAlert('red', 'Error', 'Destination path `.` already exists and is not an empty directory.'));

              case 3:
                projectPath = process.cwd();
                _context3.next = 6;
                return this._getFrontendStartersOptions();

              case 6:
                options = _context3.sent;
                choices = this._buildFrontendStartersList(options);

                if (!starterCode) {
                  _context3.next = 13;
                  break;
                }

                this.starterCode = starterCode;
                this.projectName = this.flags.name || this.starterCode;
                _context3.next = 15;
                break;

              case 13:
                _context3.next = 15;
                return this.chooseStarter(choices, options);

              case 15:
                if (initInCurrentFolder) {
                  _context3.next = 27;
                  break;
                }

                _context3.next = 18;
                return this.checkProjectNameExists();

              case 18:
                projectPath = path.join(process.cwd(), this.projectName);
                _context3.prev = 19;
                _context3.next = 22;
                return helpers.eraseDirectories(projectPath);

              case 22:
                _context3.next = 27;
                break;

              case 24:
                _context3.prev = 24;
                _context3.t0 = _context3["catch"](19);
                return _context3.abrupt("return", this.result.addAlert('red', 'Error', _context3.t0));

              case 27:
                this.result.addTextLine("Project starter will be downloaded to ".concat(projectPath, " folder"));
                _context3.next = 30;
                return this.downloadProjectStarter(projectPath);

              case 30:
                initResult = _context3.sent;
                this.result.addAlert('green', 'Success', initResult);
                this.context.mdbConfig.setValue('projectName', this.projectName);
                this.context.mdbConfig.setValue('meta.starter', this.starterCode);
                this.context.mdbConfig.setValue('meta.type', 'frontend');
                this.context.mdbConfig.setValue('hash', helpers.generateRandomString());
                this.context.mdbConfig.save(projectPath);

                this.context._loadPackageJsonConfig(projectPath);

                _context3.next = 40;
                return helpers.createJenkinsfile(projectPath, this.context.packageJsonConfig.scripts && this.context.packageJsonConfig.scripts.test);

              case 40:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[19, 24]]);
      }));

      function init(_x) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "chooseStarter",
    value: function () {
      var _chooseStarter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(choices, options) {
        var _this2 = this;

        var promptShownCount, project;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                promptShownCount = 0;

              case 1:
                if (!(promptShownCount++ >= 10)) {
                  _context4.next = 3;
                  break;
                }

                return _context4.abrupt("return", this.result.addTextLine('Please run `mdb starter ls` to see available packages.'));

              case 3:
                _context4.next = 5;
                return helpers.createListPrompt('Choose project to initialize', choices);

              case 5:
                this.starterCode = _context4.sent;
                this.projectName = this.flags.name || this.starterCode;
                project = options.find(function (o) {
                  return o.code === _this2.starterCode;
                });

                if (!project.available) {
                  _context4.next = 12;
                  break;
                }

                return _context4.abrupt("break", 14);

              case 12:
                this.result.liveAlert('yellow', 'Warning!', "You cannot create this project. Please visit https://mdbootstrap.com/my-orders/ and make sure it is available for you.");

              case 13:
                if (promptShownCount <= 10) {
                  _context4.next = 1;
                  break;
                }

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function chooseStarter(_x2, _x3) {
        return _chooseStarter.apply(this, arguments);
      }

      return chooseStarter;
    }()
  }, {
    key: "_getFrontendStartersOptions",
    value: function () {
      var _getFrontendStartersOptions2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var result;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.options.path = "/packages/starters?type=frontend".concat(!this.flags.all ? '&available=true' : '');
                _context5.next = 3;
                return this.http.get(this.options);

              case 3:
                result = _context5.sent;
                return _context5.abrupt("return", JSON.parse(result.body));

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function _getFrontendStartersOptions() {
        return _getFrontendStartersOptions2.apply(this, arguments);
      }

      return _getFrontendStartersOptions;
    }()
  }, {
    key: "_buildFrontendStartersList",
    value: function _buildFrontendStartersList(options) {
      var starters = options.reduce(function (res, curr) {
        res["".concat(curr.category, " ").concat(curr.license)] = res["".concat(curr.category, " ").concat(curr.license)] || [];
        res["".concat(curr.category, " ").concat(curr.license)].push({
          name: curr.displayName,
          "short": curr.code,
          value: curr.code
        });
        return res;
      }, {});
      return Object.keys(starters).reduce(function (res, curr) {
        res.push.apply(res, [new Separator("---- ".concat(curr, " ----"))].concat(_toConsumableArray(starters[curr])));
        return res;
      }, []);
    }
  }, {
    key: "checkProjectNameExists",
    value: function () {
      var _checkProjectNameExists = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var projectPath, confirmed;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                projectPath = path.join(process.cwd(), this.projectName);

                if (!fs.existsSync(projectPath)) {
                  _context6.next = 11;
                  break;
                }

                _context6.next = 4;
                return helpers.createConfirmationPrompt("Folder ".concat(this.projectName, " already exists, do you want to rename project you are creating now?"), true);

              case 4:
                confirmed = _context6.sent;

                if (!confirmed) {
                  _context6.next = 11;
                  break;
                }

                _context6.next = 8;
                return helpers.createTextPrompt('Enter new project name', 'Project name must not be empty.');

              case 8:
                this.projectName = _context6.sent;
                _context6.next = 11;
                return this.checkProjectNameExists();

              case 11:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function checkProjectNameExists() {
        return _checkProjectNameExists.apply(this, arguments);
      }

      return checkProjectNameExists;
    }()
  }, {
    key: "downloadProjectStarter",
    value: function () {
      var _downloadProjectStarter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(projectPath) {
        var result;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.options.path = "/packages/download/".concat(this.starterCode);
                _context7.next = 3;
                return helpers.downloadFromFTP(this.http, this.options, projectPath);

              case 3:
                result = _context7.sent;
                return _context7.abrupt("return", result);

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function downloadProjectStarter(_x4) {
        return _downloadProjectStarter.apply(this, arguments);
      }

      return downloadProjectStarter;
    }()
  }, {
    key: "publish",
    value: function () {
      var _publish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        var packageJsonEmpty, result, _packageJsonEmpty, _result, strategy, _strategy, remoteUrl, useGitlab, _strategy3, _strategy2;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                packageJsonEmpty = this.context.packageJsonConfig.name === undefined;

                if (!packageJsonEmpty) {
                  _context8.next = 18;
                  break;
                }

                this.result.liveTextLine('package.json file is required. Creating...');
                _context8.prev = 3;
                _context8.next = 6;
                return this.createPackageJson();

              case 6:
                result = _context8.sent;

                this.context._loadPackageJsonConfig();

                this.result.liveTextLine(result);
                _context8.next = 15;
                break;

              case 11:
                _context8.prev = 11;
                _context8.t0 = _context8["catch"](3);
                this.result.addAlert('red', 'Error', _context8.t0);
                return _context8.abrupt("return");

              case 15:
                _packageJsonEmpty = this.context.packageJsonConfig.name === undefined;

                if (!_packageJsonEmpty) {
                  _context8.next = 18;
                  break;
                }

                throw new Error('package.json file is required.');

              case 18:
                if (!this.flags.test) {
                  _context8.next = 30;
                  break;
                }

                _context8.prev = 19;
                _context8.next = 22;
                return this.runTests();

              case 22:
                _result = _context8.sent;
                this.result.addAlert('green', 'Success', _result);
                _context8.next = 30;
                break;

              case 26:
                _context8.prev = 26;
                _context8.t1 = _context8["catch"](19);
                this.result.addAlert('red', 'Error', _context8.t1);
                return _context8.abrupt("return");

              case 30:
                if (!this.context.mdbConfig.getValue('hash')) {
                  this.context.mdbConfig.setValue('hash', helpers.generateRandomString());
                  this.context.mdbConfig.save();
                }

                if (!(this.flags.ftp || this.context.mdbConfig.getValue('publishMethod') === 'ftp')) {
                  _context8.next = 37;
                  break;
                }

                strategy = new FtpPublishStrategy(this.context, this.result);
                _context8.next = 35;
                return this._handlePublication(strategy);

              case 35:
                _context8.next = 56;
                break;

              case 37:
                if (!(this.context.mdbConfig.getValue('publishMethod') === 'pipeline')) {
                  _context8.next = 43;
                  break;
                }

                _strategy = new PipelinePublishStrategy(this.context, this.result, this.git, this.http, this.options);
                _context8.next = 41;
                return this._handlePublication(_strategy);

              case 41:
                _context8.next = 56;
                break;

              case 43:
                remoteUrl = this.git.getCurrentRemoteUrl();

                if (!(remoteUrl !== '')) {
                  _context8.next = 53;
                  break;
                }

                _context8.next = 47;
                return helpers.createConfirmationPrompt('This project seems to be created on MDB Go GitLab server. Do you want to use our pipeline to publish your project now?');

              case 47:
                useGitlab = _context8.sent;

                if (!useGitlab) {
                  _context8.next = 53;
                  break;
                }

                _strategy3 = new PipelinePublishStrategy(this.context, this.result, this.git, this.http, this.options);
                _context8.next = 52;
                return this._handlePublication(_strategy3);

              case 52:
                return _context8.abrupt("return");

              case 53:
                _strategy2 = new FtpPublishStrategy(this.context, this.result);
                _context8.next = 56;
                return this._handlePublication(_strategy2);

              case 56:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[3, 11], [19, 26]]);
      }));

      function publish() {
        return _publish.apply(this, arguments);
      }

      return publish;
    }()
  }, {
    key: "createPackageJson",
    value: function () {
      var _createPackageJson = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(cwd) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.context.loadPackageManager();

              case 2:
                return _context9.abrupt("return", this.context.packageManager.init(cwd));

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function createPackageJson(_x5) {
        return _createPackageJson.apply(this, arguments);
      }

      return createPackageJson;
    }()
  }, {
    key: "runTests",
    value: function () {
      var _runTests = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.context.loadPackageManager();

              case 2:
                return _context10.abrupt("return", this.context.packageManager.test());

              case 3:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function runTests() {
        return _runTests.apply(this, arguments);
      }

      return runTests;
    }()
  }, {
    key: "_handlePublication",
    value: function () {
      var _handlePublication2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(strategy) {
        var response, _JSON$parse, message, url;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                this._publishRetries++;

                if (!(this._publishRetries > 5)) {
                  _context11.next = 3;
                  break;
                }

                return _context11.abrupt("return", this.result.addAlert('red', 'Error', 'Too many retries. Try again running the publish command.'));

              case 3:
                _context11.prev = 3;
                _context11.next = 6;
                return strategy.publish();

              case 6:
                response = _context11.sent;
                _JSON$parse = JSON.parse(response.body), message = _JSON$parse.message, url = _JSON$parse.url;
                this.result.addTextLine(message);
                this.result.addTextLine('');
                this.result.addAlert('blue', 'Info', 'Your URL has been generated based on your username and project name. You can change it by providing the (sub)domain of your choice by running the following command: `mdb config domain <name>`.');
                if (this.flags.open && !!url) open(url);
                _context11.next = 29;
                break;

              case 14:
                _context11.prev = 14;
                _context11.t0 = _context11["catch"](3);

                if (!(_context11.t0.statusCode === CliStatus.CONFLICT && _context11.t0.message.includes('project name'))) {
                  _context11.next = 28;
                  break;
                }

                this.result.liveAlert('red', 'Error', _context11.t0.message);
                _context11.next = 20;
                return helpers.createTextPrompt('Enter new project name', 'Project name must not be empty.');

              case 20:
                this.projectName = _context11.sent;
                this.context.setPackageJsonValue('name', this.projectName);
                this.context.mdbConfig.setValue('projectName', this.projectName);
                this.context.mdbConfig.save();
                _context11.next = 26;
                return this._handlePublication(strategy);

              case 26:
                _context11.next = 29;
                break;

              case 28:
                this.result.addAlert('red', 'Error', "Could not publish: ".concat(_context11.t0.message || _context11.t0));

              case 29:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this, [[3, 14]]);
      }));

      function _handlePublication(_x6) {
        return _handlePublication2.apply(this, arguments);
      }

      return _handlePublication;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
        var projectToDelete,
            projects,
            choices,
            projectName,
            projectExists,
            name,
            query,
            result,
            _args12 = arguments;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                projectToDelete = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : this.flags.name;
                _context12.next = 3;
                return this.getFrontendProjects();

              case 3:
                projects = _context12.sent;

                if (!(projects.length === 0)) {
                  _context12.next = 7;
                  break;
                }

                this.result.addTextLine('You don\'t have any projects yet.');
                return _context12.abrupt("return", false);

              case 7:
                choices = projects.map(function (p) {
                  return {
                    name: p.projectName
                  };
                });
                _context12.t0 = projectToDelete;

                if (_context12.t0) {
                  _context12.next = 13;
                  break;
                }

                _context12.next = 12;
                return helpers.createListPrompt('Choose project', choices);

              case 12:
                _context12.t0 = _context12.sent;

              case 13:
                projectName = _context12.t0;
                projectExists = projects.some(function (p) {
                  return p.projectName === projectName;
                });

                if (projectExists) {
                  _context12.next = 18;
                  break;
                }

                this.result.addTextLine("Project ".concat(projectName, " not found."));
                return _context12.abrupt("return", false);

              case 18:
                _context12.t1 = this.flags.force;

                if (_context12.t1) {
                  _context12.next = 23;
                  break;
                }

                _context12.next = 22;
                return helpers.createTextPrompt('This operation cannot be undone. Confirm deleting selected project by typing its name:', 'Project name must not be empty.');

              case 22:
                _context12.t1 = _context12.sent;

              case 23:
                name = _context12.t1;

                if (!(!this.flags.force && name !== projectName)) {
                  _context12.next = 27;
                  break;
                }

                this.result.addTextLine('The names do not match.');
                return _context12.abrupt("return", false);

              case 27:
                this.result.liveTextLine("Unpublishing project ".concat(projectName, "..."));
                query = this.flags['ftp-only'] ? '?ftp=true' : '';
                this.options.path = "/project/unpublish/".concat(projectName).concat(query);
                _context12.prev = 30;
                _context12.next = 33;
                return this.http["delete"](this.options);

              case 33:
                result = _context12.sent;
                this.result.addAlert('green', 'Success', result.body);
                return _context12.abrupt("return", true);

              case 38:
                _context12.prev = 38;
                _context12.t2 = _context12["catch"](30);
                this.result.addAlert('red', 'Error', "Could not delete ".concat(projectName, ": ").concat(_context12.t2.message));
                return _context12.abrupt("return", false);

              case 42:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this, [[30, 38]]);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
        var projects, choices, projectName, project, result, repoUrlWithNicename, query;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.getFrontendProjects();

              case 2:
                projects = _context13.sent;

                if (!(projects.length === 0)) {
                  _context13.next = 5;
                  break;
                }

                return _context13.abrupt("return", this.result.addTextLine('You don\'t have any projects yet.'));

              case 5:
                choices = projects.map(function (p) {
                  return {
                    name: p.projectName
                  };
                });
                _context13.t0 = this.flags.name || this.args[0];

                if (_context13.t0) {
                  _context13.next = 11;
                  break;
                }

                _context13.next = 10;
                return helpers.createListPrompt('Choose project', choices);

              case 10:
                _context13.t0 = _context13.sent;

              case 11:
                projectName = _context13.t0;
                project = projects.find(function (p) {
                  return p.projectName === projectName;
                });

                if (project) {
                  _context13.next = 15;
                  break;
                }

                return _context13.abrupt("return", this.result.addTextLine("Project ".concat(projectName, " not found.")));

              case 15:
                _context13.prev = 15;

                if (!(project.repoUrl && !this.flags.ftp)) {
                  _context13.next = 23;
                  break;
                }

                repoUrlWithNicename = project.repoUrl.replace(/^https:\/\//, "https://".concat(project.user.userNicename, "@"));
                _context13.next = 20;
                return this.git.clone(repoUrlWithNicename);

              case 20:
                result = _context13.sent;
                _context13.next = 30;
                break;

              case 23:
                _context13.next = 25;
                return helpers.eraseDirectories(path.join(process.cwd(), projectName));

              case 25:
                query = this.flags.force ? '?force=true' : '';
                this.options.path = "/project/get/".concat(projectName).concat(query);
                _context13.next = 29;
                return helpers.downloadFromFTP(this.http, this.options, process.cwd());

              case 29:
                result = _context13.sent;

              case 30:
                this.result.addAlert('green', 'Success', result);
                _context13.next = 36;
                break;

              case 33:
                _context13.prev = 33;
                _context13.t1 = _context13["catch"](15);
                this.result.addAlert('red', 'Error', "Could not download ".concat(projectName, ": ").concat(_context13.t1.message || _context13.t1));

              case 36:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this, [[15, 33]]);
      }));

      function get() {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }]);

  return FrontendReceiver;
}(Receiver);

module.exports = FrontendReceiver;