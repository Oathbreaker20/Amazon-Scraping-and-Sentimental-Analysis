'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var config = require('../config');

var Receiver = require('./receiver');

var helpers = require('../helpers');

var inquirer = require('inquirer');

var DatabaseReceiver = /*#__PURE__*/function (_Receiver) {
  _inherits(DatabaseReceiver, _Receiver);

  var _super = _createSuper(DatabaseReceiver);

  function DatabaseReceiver(context) {
    var _this;

    _classCallCheck(this, DatabaseReceiver);

    _this = _super.call(this, context);

    _this.context.authenticateUser();

    _this.options = {
      hostname: config.host,
      headers: {
        Authorization: "Bearer ".concat(_this.context.userToken)
      }
    };

    _this.context.registerNonArgFlags(['help']);

    _this.context.registerFlagExpansions({
      '-db': '--database',
      '-n': '--name',
      '-h': '--help'
    });

    _this.flags = _this.context.getParsedFlags();
    _this.args = _this.context.args;
    return _this;
  }

  _createClass(DatabaseReceiver, [{
    key: "list",
    value: function () {
      var _list = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var databases;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.result.liveTextLine('Fetching databases...');
                _context.next = 3;
                return this.getDatabases();

              case 3:
                databases = _context.sent;

                if (databases.length) {
                  databases = databases.map(function (db) {
                    return {
                      'Database': db.database,
                      'Name': db.name,
                      'Username': db.username,
                      'Hostname': db.host,
                      'Connection String': db.connectionString,
                      'Description': db.description
                    };
                  });
                  this.result.addTable(databases);
                } else {
                  this.result.addTextLine('You don\'t have any databases yet.');
                }

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function list() {
        return _list.apply(this, arguments);
      }

      return list;
    }()
  }, {
    key: "getDatabases",
    value: function () {
      var _getDatabases = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var result;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.options.path = '/databases';
                _context2.next = 3;
                return this.http.get(this.options);

              case 3:
                result = _context2.sent;
                return _context2.abrupt("return", JSON.parse(result.body));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getDatabases() {
        return _getDatabases.apply(this, arguments);
      }

      return getDatabases;
    }()
  }, {
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var database, confirmed, prompt, passwordValue, answers, response, mysqlMsg, mongoMsg, msg;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.t0 = this.flags.database;

                if (_context3.t0) {
                  _context3.next = 5;
                  break;
                }

                _context3.next = 4;
                return helpers.createListPrompt('Choose database', config.databases);

              case 4:
                _context3.t0 = _context3.sent;

              case 5:
                database = _context3.t0;

                if (config.databases.includes(database)) {
                  _context3.next = 8;
                  break;
                }

                return _context3.abrupt("return", this.result.addTextLine("This database is not supported. Allowed technologies: ".concat(config.databases.join(', '))));

              case 8:
                _context3.next = 10;
                return helpers.createConfirmationPrompt('In order to create a new database, you need to create the database user. Proceed?', true);

              case 10:
                confirmed = _context3.sent;

                if (confirmed) {
                  _context3.next = 13;
                  break;
                }

                return _context3.abrupt("return", this.result.addAlert('yellow', 'Warning!', 'Cannot create database without a database user.'));

              case 13:
                prompt = inquirer.createPromptModule();
                _context3.next = 16;
                return prompt([{
                  type: 'text',
                  message: 'Enter username',
                  name: 'username',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^[a-z0-9_]+$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Username is invalid.';
                  }
                }, {
                  type: 'password',
                  message: 'Enter password',
                  name: 'password',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*(\W|_)).{8,}$/.test(value);
                    passwordValue = value;
                    /* istanbul ignore next */

                    return valid || 'Password is incorrect, it should contain at least one uppercase letter, at least one lowercase letter, at least one number, at least one special symbol and it should contain more than 7 characters.';
                  }
                }, {
                  type: 'password',
                  message: 'Repeat password',
                  name: 'repeatPassword',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && typeof value === 'string' && value === passwordValue;
                    /* istanbul ignore next */

                    return valid || 'Passwords do not match.';
                  }
                }, {
                  type: 'text',
                  message: 'Enter database name',
                  name: 'name',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^[a-z0-9_]+$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Database name is invalid.';
                  }
                }, {
                  type: 'text',
                  message: 'Enter description',
                  name: 'description'
                }]);

              case 16:
                answers = _context3.sent;
                answers.database = database;
                this.options.data = JSON.stringify(answers);
                this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
                this.options.headers['Content-Type'] = 'application/json';
                this.options.path = '/databases';
                _context3.prev = 22;
                _context3.next = 25;
                return this.http.post(this.options);

              case 25:
                response = _context3.sent;
                response = JSON.parse(response.body);
                _context3.next = 32;
                break;

              case 29:
                _context3.prev = 29;
                _context3.t1 = _context3["catch"](22);
                return _context3.abrupt("return", this.result.addAlert('red', 'Error', "Could not create database: ".concat(_context3.t1.message || _context3.t1)));

              case 32:
                mysqlMsg = "You can manage your database with phpMyAdmin at https://phpmyadmin.mdbgo.com/";
                mongoMsg = "To connect to this database you need to download Robo3T or another MongoDB client";
                msg = response.database === 'mysql8' ? mysqlMsg : mongoMsg;
                this.result.addAlert('red', '\nWarning!', "Write down the password to your database as we will never show it again.\n");
                this.result.addAlert('blue', 'Info:', "".concat(msg, "\n"));
                this.result.addTable([{
                  'Username': response.username,
                  'Password': response.password,
                  'Database Name': response.name,
                  'Connection String': response.connectionString
                }]);

              case 38:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[22, 29]]);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var databases, dbName, database, name;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.getDatabases();

              case 2:
                databases = _context4.sent;

                if (!(databases.length === 0)) {
                  _context4.next = 5;
                  break;
                }

                return _context4.abrupt("return", this.result.addTextLine('You don\'t have any databases yet.'));

              case 5:
                _context4.t0 = this.flags.name;

                if (_context4.t0) {
                  _context4.next = 10;
                  break;
                }

                _context4.next = 9;
                return helpers.createListPrompt('Choose database', databases);

              case 9:
                _context4.t0 = _context4.sent;

              case 10:
                dbName = _context4.t0;
                database = databases.find(function (db) {
                  return db.name === dbName;
                });

                if (database) {
                  _context4.next = 14;
                  break;
                }

                return _context4.abrupt("return", this.result.addTextLine("Database ".concat(dbName, " not found.")));

              case 14:
                this.result.liveAlert('red', '\nWarning!', 'This operation cannot be undone. If it\'s a misclick you can abort the operation with Ctrl + C\n');
                _context4.next = 17;
                return helpers.createTextPrompt('Confirm deleting selected database by typing its name:', 'Database name must not be empty.');

              case 17:
                name = _context4.sent;

                if (!(name !== database.name)) {
                  _context4.next = 20;
                  break;
                }

                return _context4.abrupt("return", this.result.addTextLine('The names do not match.'));

              case 20:
                this.options.path = "/databases/".concat(database.databaseId);
                _context4.prev = 21;
                _context4.next = 24;
                return this.http["delete"](this.options);

              case 24:
                this.result.addAlert('green', '\nResult:', 'Database successfully deleted.\n');
                _context4.next = 30;
                break;

              case 27:
                _context4.prev = 27;
                _context4.t1 = _context4["catch"](21);
                this.result.addAlert('red', 'Error:', _context4.t1.message);

              case 30:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[21, 27]]);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "info",
    value: function () {
      var _info = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var databases, dbName, database;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.getDatabases();

              case 2:
                databases = _context5.sent;

                if (!(databases.length === 0)) {
                  _context5.next = 5;
                  break;
                }

                return _context5.abrupt("return", this.result.addTextLine('You don\'t have any databases yet.'));

              case 5:
                _context5.t0 = this.flags.name || this.args[0];

                if (_context5.t0) {
                  _context5.next = 10;
                  break;
                }

                _context5.next = 9;
                return helpers.createListPrompt('Choose database', databases);

              case 9:
                _context5.t0 = _context5.sent;

              case 10:
                dbName = _context5.t0;
                database = databases.find(function (db) {
                  return db.name === dbName;
                });

                if (database) {
                  _context5.next = 14;
                  break;
                }

                return _context5.abrupt("return", this.result.addTextLine("Database ".concat(dbName, " not found.")));

              case 14:
                this.result.addAlert('turquoise', '\nConnection String:', database.connectionString);
                this.result.addAlert('blue', '\nInfo:', 'The connection string above does not show the password for your database user. You have to replace the \'<password>\' string with your real password in order to connect to the database.\n');

              case 16:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function info() {
        return _info.apply(this, arguments);
      }

      return info;
    }()
  }, {
    key: "changeConfig",
    value: function () {
      var _changeConfig = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var args;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                args = this.context.args;

                if (!(args[0] === 'password')) {
                  _context6.next = 6;
                  break;
                }

                _context6.next = 4;
                return this.changePassword();

              case 4:
                _context6.next = 7;
                break;

              case 6:
                this.result.addAlert('red', 'Error:', 'Please provide valid argument!');

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function changeConfig() {
        return _changeConfig.apply(this, arguments);
      }

      return changeConfig;
    }()
  }, {
    key: "changePassword",
    value: function () {
      var _changePassword = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        var databases, dbName, database;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.getDatabases();

              case 2:
                databases = _context7.sent;

                if (!(databases.length === 0)) {
                  _context7.next = 5;
                  break;
                }

                return _context7.abrupt("return", this.result.addTextLine('You don\'t have any databases yet.'));

              case 5:
                _context7.t0 = this.flags.name;

                if (_context7.t0) {
                  _context7.next = 10;
                  break;
                }

                _context7.next = 9;
                return helpers.createListPrompt('Choose database', databases);

              case 9:
                _context7.t0 = _context7.sent;

              case 10:
                dbName = _context7.t0;
                database = databases.find(function (db) {
                  return db.name === dbName;
                });

                if (database) {
                  _context7.next = 14;
                  break;
                }

                return _context7.abrupt("return", this.result.addTextLine("Database ".concat(dbName, " not found.")));

              case 14:
                this.options.path = '/databases/password/' + database.databaseId;
                _context7.next = 17;
                return this.askForNewPassword();

              case 17:
                _context7.prev = 17;
                _context7.next = 20;
                return this.http.put(this.options);

              case 20:
                this.result.addAlert('green', '\nResult:', 'Database password successfully changed.\n');
                _context7.next = 26;
                break;

              case 23:
                _context7.prev = 23;
                _context7.t1 = _context7["catch"](17);
                this.result.addAlert('red', 'Error:', _context7.t1.message);

              case 26:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this, [[17, 23]]);
      }));

      function changePassword() {
        return _changePassword.apply(this, arguments);
      }

      return changePassword;
    }()
  }, {
    key: "askForNewPassword",
    value: function () {
      var _askForNewPassword = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        var prompt, passwordValue, answers, password, repeatPassword;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                prompt = inquirer.createPromptModule();
                _context8.next = 3;
                return prompt([{
                  type: 'password',
                  message: 'Enter new db password',
                  name: 'password',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*(\W|_)).{8,}$/.test(value);
                    passwordValue = value;
                    /* istanbul ignore next */

                    return valid || 'Password is incorrect, it should contain at least one uppercase letter, at least one lowercase letter, at least one number, at least one special symbol and it should contain more than 7 characters.';
                  }
                }, {
                  type: 'password',
                  message: 'Re-enter new db password',
                  name: 'repeatPassword',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && typeof value === 'string' && value === passwordValue;
                    /* istanbul ignore next */

                    return valid || 'Passwords do not match.';
                  }
                }]);

              case 3:
                answers = _context8.sent;
                password = answers.password, repeatPassword = answers.repeatPassword;

                if (!(password !== repeatPassword)) {
                  _context8.next = 7;
                  break;
                }

                throw new Error('Passwords do not match');

              case 7:
                this.options.data = JSON.stringify(answers);
                this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
                this.options.headers['Content-Type'] = 'application/json';

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function askForNewPassword() {
        return _askForNewPassword.apply(this, arguments);
      }

      return askForNewPassword;
    }()
  }]);

  return DatabaseReceiver;
}(Receiver);

module.exports = DatabaseReceiver;