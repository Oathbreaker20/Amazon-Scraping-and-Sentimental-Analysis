'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HttpWrapper = require('../utils/http-wrapper');

var CommandResult = require('../utils/command-result');

var GitManager = require('../utils/managers/git-manager');

var helpers = require('../helpers');

var config = require('../config');

var path = require('path');

var Receiver = /*#__PURE__*/function () {
  function Receiver(context) {
    _classCallCheck(this, Receiver);

    this.context = context;
    this.http = new HttpWrapper();
    this.git = new GitManager();
    this._result = new CommandResult();
  }

  _createClass(Receiver, [{
    key: "clearResult",
    value: function clearResult() {
      this._result = new CommandResult();
    }
  }, {
    key: "rename",
    value: function () {
      var _rename = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var newName, projectName, query, result, _JSON$parse, message, packageJsonPath;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = this.flags['new-name'];

                if (_context.t0) {
                  _context.next = 5;
                  break;
                }

                _context.next = 4;
                return helpers.createTextPrompt('Enter new project name', 'Project name must not be empty.');

              case 4:
                _context.t0 = _context.sent;

              case 5:
                newName = _context.t0;
                projectName = this.getProjectName();
                query = this.context.packageJsonConfig.dependencies && this.context.packageJsonConfig.dependencies['react'] ? '?update=true' : '';
                this.options.path = "/project/rename/".concat(projectName).concat(query);
                this.options.data = JSON.stringify({
                  projectName: newName
                });
                this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
                this.options.headers['Content-Type'] = 'application/json';
                _context.prev = 12;
                _context.next = 15;
                return this.http.post(this.options);

              case 15:
                result = _context.sent;
                _JSON$parse = JSON.parse(result.body), message = _JSON$parse.message;
                this.result.addAlert('green', 'Success', message);
                _context.next = 24;
                break;

              case 20:
                _context.prev = 20;
                _context.t1 = _context["catch"](12);
                this.result.addAlert('red', 'Error', "Could not rename ".concat(projectName, ": ").concat(_context.t1.message));
                return _context.abrupt("return");

              case 24:
                if (!this.context.packageJsonConfig.name) {
                  _context.next = 28;
                  break;
                }

                packageJsonPath = path.join(process.cwd(), 'package.json');
                _context.next = 28;
                return helpers.serializeJsonFile(packageJsonPath, _objectSpread(_objectSpread({}, this.context.packageJsonConfig), {
                  name: newName
                }));

              case 28:
                this.context.mdbConfig.setValue('projectName', newName);
                this.context.mdbConfig.save();
                this.result.addAlert('green', 'Success', "Project name successfully changed to ".concat(newName));

              case 31:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[12, 20]]);
      }));

      function rename() {
        return _rename.apply(this, arguments);
      }

      return rename;
    }()
  }, {
    key: "getProjectName",
    value: function getProjectName() {
      return this.context.packageJsonConfig.name || this.context.mdbConfig.getValue('projectName');
    }
  }, {
    key: "result",
    get: function get() {
      return this._result;
    }
  }], [{
    key: "detectEntity",
    value: function () {
      var _detectEntity = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(context) {
        var entity, http, args, flags, options, projectName, result;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                context.registerFlagExpansions({
                  '-n': '--name'
                });
                context.authenticateUser();
                entity = '';
                http = new HttpWrapper();
                args = context.args;
                flags = context.getParsedFlags();
                options = {
                  hostname: config.host,
                  headers: {
                    Authorization: "Bearer ".concat(context.userToken)
                  }
                };
                projectName = args[0] || flags.name;

                if (!projectName) {
                  _context2.next = 20;
                  break;
                }

                options.path = '/project/entity/' + projectName;
                _context2.prev = 10;
                _context2.next = 13;
                return http.get(options);

              case 13:
                result = _context2.sent;
                entity = JSON.parse(result.body).entity;
                _context2.next = 20;
                break;

              case 17:
                _context2.prev = 17;
                _context2.t0 = _context2["catch"](10);
                throw new Error("Could not auto-detect entity. Please provide it manually or run mdb help. Error: ".concat(_context2.t0.message));

              case 20:
                return _context2.abrupt("return", entity);

              case 21:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[10, 17]]);
      }));

      function detectEntity(_x) {
        return _detectEntity.apply(this, arguments);
      }

      return detectEntity;
    }()
  }]);

  return Receiver;
}();

module.exports = Receiver;