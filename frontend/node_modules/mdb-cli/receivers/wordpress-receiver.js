'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var open = require('open');

var inquirer = require('inquirer');

var Separator = inquirer.Separator;

var config = require('../config');

var Receiver = require('./receiver');

var ProjectStatus = require('../models/project-status');

var CliStatus = require('../models/cli-status');

var FtpPublishStrategy = require('./strategies/publish/ftp-publish-strategy');

var HttpWrapper = require('../utils/http-wrapper');

var helpers = require('../helpers');

var path = require('path');

var WordpressReceiver = /*#__PURE__*/function (_Receiver) {
  _inherits(WordpressReceiver, _Receiver);

  var _super = _createSuper(WordpressReceiver);

  function WordpressReceiver(context) {
    var _this;

    _classCallCheck(this, WordpressReceiver);

    _this = _super.call(this, context);

    _this.context.authenticateUser();

    _this.options = {
      hostname: config.host,
      headers: {
        Authorization: "Bearer ".concat(_this.context.userToken)
      }
    };
    _this.projectName = '';
    _this.starterCode = '';

    _this.context.registerNonArgFlags(['advanced', 'open', 'ftp', 'follow', 'help', 'override']);

    _this.context.registerFlagExpansions({
      '-f': '--follow',
      '-n': '--name',
      '-c': '--advanced',
      '-o': '--open',
      '-h': '--help'
    });

    _this.flags = _this.context.getParsedFlags();
    _this.args = _this.context.args;
    _this._publishRetries = 0;
    return _this;
  }

  _createClass(WordpressReceiver, [{
    key: "list",
    value: function () {
      var _list = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var projects;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.result.liveTextLine('Fetching wordpress projects...');
                _context.next = 3;
                return this.getWordpressProjects();

              case 3:
                projects = _context.sent;

                if (projects.length) {
                  projects = projects.map(function (p) {
                    var technologyMeta = p.projectMeta.find(function (m) {
                      return m.metaKey === '_backend_technology';
                    });
                    var technology = technologyMeta ? technologyMeta.metaValue : undefined;
                    var portMeta = p.projectMeta.find(function (m) {
                      return m.metaKey === '_container_port';
                    });
                    var port = portMeta ? portMeta.metaValue : undefined;
                    var isUp = !!port;
                    var url = !!p.domainName ? "http://".concat(p.domainName) : "".concat(config.projectsDomain, ":").concat(port);
                    var deletedFromFTP = p.projectMeta.some(function (m) {
                      return m.metaKey === '_uploaded_to_ftp' && m.metaValue === '0';
                    });
                    return {
                      'Project Name': p.projectName,
                      'Published': new Date(p.publishDate).toLocaleString(),
                      'Edited': new Date(p.editDate).toLocaleString(),
                      'Technology': technology,
                      'Repository': p.repoUrl ? p.repoUrl : '-',
                      'URL': isUp && !deletedFromFTP ? url : 'Unavailable'
                    };
                  });
                  this.result.addTable(projects);
                } else {
                  this.result.addTextLine('You don\'t have any projects yet.');
                }

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function list() {
        return _list.apply(this, arguments);
      }

      return list;
    }()
  }, {
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(starterCode) {
        var confirmed, options, choices, result;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (process.cwd().endsWith('/wp-content/themes')) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return helpers.createConfirmationPrompt('This command should be run inside [...]/wp-content/themes directory. Are you sure you want to continue in the current directory?', false);

              case 3:
                confirmed = _context2.sent;

                if (confirmed) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", this.result.addTextLine('Initialization aborted.'));

              case 6:
                _context2.next = 8;
                return this._getWordpressStartersOptions();

              case 8:
                options = _context2.sent;
                choices = this._buildWordpressStartersList(options);

                if (!starterCode) {
                  _context2.next = 15;
                  break;
                }

                this.starterCode = starterCode;
                this.projectName = this.flags.name || this.starterCode;
                _context2.next = 17;
                break;

              case 15:
                _context2.next = 17;
                return this.chooseStarter(choices, options);

              case 17:
                _context2.prev = 17;
                this.options.path = "/packages/download/".concat(this.starterCode);
                _context2.next = 21;
                return helpers.downloadFromFTP(this.http, this.options, process.cwd());

              case 21:
                result = _context2.sent;
                this.context.mdbConfig.setValue('meta.starter', this.starterCode);
                this.context.mdbConfig.setValue('meta.type', 'wordpress');
                this.context.mdbConfig.setValue('hash', helpers.generateRandomString());
                this.context.mdbConfig.save(helpers.getThemeName(this.starterCode));
                this.result.addAlert('green', 'Success', result);
                _context2.next = 32;
                break;

              case 29:
                _context2.prev = 29;
                _context2.t0 = _context2["catch"](17);
                this.result.addAlert('red', 'Error', "Could not initialize: ".concat(_context2.t0.message || _context2.t0));

              case 32:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[17, 29]]);
      }));

      function init(_x) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "chooseStarter",
    value: function () {
      var _chooseStarter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(choices, options) {
        var _this2 = this;

        var promptShownCount, project;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                promptShownCount = 0;

              case 1:
                if (!(promptShownCount++ >= 10)) {
                  _context3.next = 3;
                  break;
                }

                return _context3.abrupt("return", this.result.addTextLine('Please run `mdb starter ls` to see available packages.'));

              case 3:
                _context3.next = 5;
                return helpers.createListPrompt('Choose project to initialize', choices);

              case 5:
                this.starterCode = _context3.sent;
                this.projectName = this.flags.name || this.starterCode;
                project = options.find(function (o) {
                  return o.code === _this2.starterCode;
                });

                if (!project.available) {
                  _context3.next = 12;
                  break;
                }

                return _context3.abrupt("break", 14);

              case 12:
                this.result.liveAlert('yellow', 'Warning!', "You cannot create this project. Please visit https://mdbootstrap.com/my-orders/ and make sure it is available for you.");

              case 13:
                if (promptShownCount <= 10) {
                  _context3.next = 1;
                  break;
                }

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function chooseStarter(_x2, _x3) {
        return _chooseStarter.apply(this, arguments);
      }

      return chooseStarter;
    }()
  }, {
    key: "_getWordpressStartersOptions",
    value: function () {
      var _getWordpressStartersOptions2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var result;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.options.path = "/packages/starters?type=wordpress".concat(!this.flags.all ? '&available=true' : '');
                _context4.next = 3;
                return this.http.get(this.options);

              case 3:
                result = _context4.sent;
                return _context4.abrupt("return", JSON.parse(result.body));

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function _getWordpressStartersOptions() {
        return _getWordpressStartersOptions2.apply(this, arguments);
      }

      return _getWordpressStartersOptions;
    }()
  }, {
    key: "_buildWordpressStartersList",
    value: function _buildWordpressStartersList(options) {
      var starters = options.reduce(function (res, curr) {
        res["".concat(curr.category, " ").concat(curr.license)] = res["".concat(curr.category, " ").concat(curr.license)] || [];
        res["".concat(curr.category, " ").concat(curr.license)].push({
          name: curr.displayName,
          "short": curr.code,
          value: curr.code
        });
        return res;
      }, {});
      return Object.keys(starters).reduce(function (res, curr) {
        res.push.apply(res, [new Separator("---- ".concat(curr, " ----"))].concat(_toConsumableArray(starters[curr])));
        return res;
      }, []);
    }
  }, {
    key: "publish",
    value: function () {
      var _publish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var pageVariant, wpData, projectName, email, username;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._getPageVariant();

              case 2:
                pageVariant = _context5.sent;
                _context5.next = 5;
                return this._getWpData();

              case 5:
                wpData = _context5.sent;
                projectName = this.context.mdbConfig.getValue('projectName');
                email = this.context.mdbConfig.getValue('wordpress.email');
                username = this.context.mdbConfig.getValue('wordpress.username') || 'admin';

                if (!this.context.mdbConfig.getValue('hash')) {
                  this.context.mdbConfig.setValue('hash', helpers.generateRandomString());
                  this.context.mdbConfig.save();
                }

                _context5.next = 12;
                return this._handlePublication(pageVariant, projectName, email, username, wpData);

              case 12:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function publish() {
        return _publish.apply(this, arguments);
      }

      return publish;
    }()
  }, {
    key: "_getPageVariant",
    value: function () {
      var _getPageVariant2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var pageVariant, options, choices;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                pageVariant = this.context.mdbConfig.getValue('meta.starter');

                if (pageVariant) {
                  _context6.next = 12;
                  break;
                }

                _context6.next = 4;
                return this._getWordpressStartersOptions();

              case 4:
                options = _context6.sent;
                choices = this._buildWordpressStartersList(options);
                _context6.next = 8;
                return helpers.createListPrompt('Choose page variant:', choices);

              case 8:
                pageVariant = _context6.sent;
                this.context.mdbConfig.setValue('meta.starter', pageVariant);
                this.context.mdbConfig.setValue('meta.type', 'wordpress');
                this.context.mdbConfig.save();

              case 12:
                return _context6.abrupt("return", pageVariant);

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function _getPageVariant() {
        return _getPageVariant2.apply(this, arguments);
      }

      return _getPageVariant;
    }()
  }, {
    key: "_getWpData",
    value: function () {
      var _getWpData2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        var wpData;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                wpData = {};

                if (this.context.mdbConfig.getValue('projectName')) {
                  _context7.next = 9;
                  break;
                }

                _context7.next = 4;
                return this.askWpCredentials(this.flags.advanced);

              case 4:
                wpData = _context7.sent;
                this.context.mdbConfig.setValue('projectName', wpData.pageName.trim().toLowerCase().replace(/ /g, '-').replace(/[^\w-]+/g, ''));
                this.context.mdbConfig.setValue('wordpress.email', wpData.email);
                this.context.mdbConfig.setValue('wordpress.username', wpData.username);
                this.context.mdbConfig.save();

              case 9:
                return _context7.abrupt("return", wpData);

              case 10:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _getWpData() {
        return _getWpData2.apply(this, arguments);
      }

      return _getWpData;
    }()
  }, {
    key: "_handlePublication",
    value: function () {
      var _handlePublication2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(pageVariant, projectName, email, username, wpData) {
        var strategy, response, firstPublication, payload;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this._publishRetries++;

                if (!(this._publishRetries > 5)) {
                  _context8.next = 3;
                  break;
                }

                return _context8.abrupt("return", this.result.addAlert('red', 'Error', 'Too many retries. Try again running the publish command.'));

              case 3:
                _context8.prev = 3;
                strategy = new FtpPublishStrategy(this.context, this.result);
                _context8.next = 7;
                return strategy.publish();

              case 7:
                response = _context8.sent;
                firstPublication = response.statusCode === 201;

                if (!firstPublication) {
                  _context8.next = 16;
                  break;
                }

                this.result.liveTextLine('Files uploaded, running your project...');
                payload = {
                  pageType: pageVariant,
                  pageName: projectName,
                  email: email,
                  username: username,
                  password: wpData.password,
                  repeatPassword: wpData.repeatPassword
                };
                _context8.next = 14;
                return this._createWpPage(payload);

              case 14:
                _context8.next = 17;
                break;

              case 16:
                this.result.addTextLine(response.body);

              case 17:
                _context8.next = 33;
                break;

              case 19:
                _context8.prev = 19;
                _context8.t0 = _context8["catch"](3);

                if (!(_context8.t0.statusCode === CliStatus.CONFLICT && _context8.t0.message.includes('project name'))) {
                  _context8.next = 32;
                  break;
                }

                this.result.liveAlert('red', 'Error', _context8.t0.message);
                _context8.next = 25;
                return helpers.createTextPrompt('Enter new project name', 'Project name must not be empty.');

              case 25:
                this.projectName = _context8.sent;
                this.context.mdbConfig.setValue('projectName', this.projectName);
                this.context.mdbConfig.save();
                _context8.next = 30;
                return this._handlePublication(pageVariant, projectName, email, username, wpData);

              case 30:
                _context8.next = 33;
                break;

              case 32:
                this.result.addAlert('red', 'Error', "Could not publish: ".concat(_context8.t0.message || _context8.t0));

              case 33:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[3, 19]]);
      }));

      function _handlePublication(_x4, _x5, _x6, _x7, _x8) {
        return _handlePublication2.apply(this, arguments);
      }

      return _handlePublication;
    }()
  }, {
    key: "_createWpPage",
    value: function () {
      var _createWpPage2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(payload) {
        var _yield$this$http$post, body, _JSON$parse, url, password;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                this.options.path = '/project/wordpress';
                this.options.data = JSON.stringify(payload);
                this.options.headers['Content-Type'] = 'application/json';
                this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
                _context9.prev = 4;
                _context9.next = 7;
                return this.http.post(this.options);

              case 7:
                _yield$this$http$post = _context9.sent;
                body = _yield$this$http$post.body;
                _JSON$parse = JSON.parse(body), url = _JSON$parse.url, password = _JSON$parse.password;
                if (this.flags.open && !!url) open.call(null, url);
                this.result.addAlert('green', 'Success', '');
                this.result.addTextLine("\nYour page is available at ".concat(url, "\n"));
                this.result.addTextLine("Your admin panel is available at ".concat(url, "/wp-admin/\n"));
                this.result.addAlert('yellow', 'Note', 'Please write down your username and password now, as we will not show it again.\n');
                this.result.addAlert('turquoise', 'Username:', payload.username);
                this.result.addAlert('turquoise', 'Password:', password);
                this.result.addTextLine('');
                this.result.addAlert('blue', 'Info', 'Your URL has been generated based on your username and project name. You can change it by providing the (sub)domain of your choice by running the following command: `mdb config domain <name>`.');
                _context9.next = 24;
                break;

              case 21:
                _context9.prev = 21;
                _context9.t0 = _context9["catch"](4);
                this.result.addAlert('red', 'Error', "Could not create WordPress page: ".concat(_context9.t0.message));

              case 24:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this, [[4, 21]]);
      }));

      function _createWpPage(_x9) {
        return _createWpPage2.apply(this, arguments);
      }

      return _createWpPage;
    }()
  }, {
    key: "askWpCredentials",
    value: function () {
      var _askWpCredentials = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(advanced) {
        var prompt, passwordValue;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                prompt = inquirer.createPromptModule();
                return _context10.abrupt("return", prompt([{
                  type: 'text',
                  message: 'Enter page name',
                  name: 'pageName',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^[A-Za-z0-9_ ?!-:;+=]+$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Page name is invalid.';
                  }
                }].concat(_toConsumableArray(advanced ? [{
                  type: 'text',
                  message: 'Enter username',
                  name: 'username',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^[a-z0-9_]+$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Username is invalid.';
                  }
                }, {
                  type: 'password',
                  message: 'Enter password',
                  name: 'password',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*(\W|_)).{8,}$/.test(value);
                    passwordValue = value;
                    /* istanbul ignore next */

                    return valid || 'Password is incorrect, it should contain at least one uppercase letter, at least one lowercase letter, at least one number, at least one special symbol and it should contain more than 7 characters.';
                  }
                }, {
                  type: 'password',
                  message: 'Repeat password',
                  name: 'repeatPassword',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && typeof value === 'string' && value === passwordValue;
                    /* istanbul ignore next */

                    return valid || 'Passwords do not match.';
                  }
                }] : []), [{
                  type: 'text',
                  message: 'Enter email',
                  name: 'email',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Please enter a valid email.';
                  }
                }])));

              case 2:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function askWpCredentials(_x10) {
        return _askWpCredentials.apply(this, arguments);
      }

      return askWpCredentials;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
        var projectToDelete,
            projects,
            choices,
            projectName,
            projectExists,
            name,
            result,
            _args11 = arguments;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                projectToDelete = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : this.flags.name;
                _context11.next = 3;
                return this.getWordpressProjects();

              case 3:
                projects = _context11.sent;

                if (!(projects.length === 0)) {
                  _context11.next = 7;
                  break;
                }

                this.result.addTextLine('You don\'t have any projects yet.');
                return _context11.abrupt("return", false);

              case 7:
                choices = projects.map(function (p) {
                  return {
                    name: p.projectName
                  };
                });
                _context11.t0 = projectToDelete;

                if (_context11.t0) {
                  _context11.next = 13;
                  break;
                }

                _context11.next = 12;
                return helpers.createListPrompt('Choose project', choices);

              case 12:
                _context11.t0 = _context11.sent;

              case 13:
                projectName = _context11.t0;
                projectExists = projects.some(function (p) {
                  return p.projectName === projectName;
                });

                if (projectExists) {
                  _context11.next = 18;
                  break;
                }

                this.result.addTextLine("Project ".concat(projectName, " not found."));
                return _context11.abrupt("return", false);

              case 18:
                this.result.liveAlert('yellow', 'Warning', 'This operation cannot be undone, your project and its database will be permanently deleted.');
                _context11.t1 = this.flags.force;

                if (_context11.t1) {
                  _context11.next = 24;
                  break;
                }

                _context11.next = 23;
                return helpers.createTextPrompt('Confirm deleting selected project by typing its name:', 'Project name must not be empty.');

              case 23:
                _context11.t1 = _context11.sent;

              case 24:
                name = _context11.t1;

                if (!(!this.flags.force && name !== projectName)) {
                  _context11.next = 28;
                  break;
                }

                this.result.addTextLine('The names do not match.');
                return _context11.abrupt("return", false);

              case 28:
                this.result.liveTextLine("Unpublishing project ".concat(projectName, "..."));
                this.options.path = "/project/unpublish/".concat(projectName);
                _context11.prev = 30;
                _context11.next = 33;
                return this.http["delete"](this.options);

              case 33:
                result = _context11.sent;
                this.result.addAlert('green', 'Success', result.body);
                return _context11.abrupt("return", true);

              case 38:
                _context11.prev = 38;
                _context11.t2 = _context11["catch"](30);
                this.result.addAlert('red', 'Error', "Could not delete ".concat(projectName, ": ").concat(_context11.t2.message));
                return _context11.abrupt("return", false);

              case 42:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this, [[30, 38]]);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
        var projects, choices, projectName, project, result, repoUrlWithNicename, projectPath, query;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.getWordpressProjects();

              case 2:
                projects = _context12.sent;

                if (!(projects.length === 0)) {
                  _context12.next = 5;
                  break;
                }

                return _context12.abrupt("return", this.result.addTextLine('You don\'t have any projects yet.'));

              case 5:
                choices = projects.map(function (p) {
                  return {
                    name: p.projectName
                  };
                });
                _context12.t0 = this.flags.name || this.args[0];

                if (_context12.t0) {
                  _context12.next = 11;
                  break;
                }

                _context12.next = 10;
                return helpers.createListPrompt('Choose project', choices);

              case 10:
                _context12.t0 = _context12.sent;

              case 11:
                projectName = _context12.t0;
                project = projects.find(function (p) {
                  return p.projectName === projectName;
                });

                if (project) {
                  _context12.next = 15;
                  break;
                }

                return _context12.abrupt("return", this.result.addTextLine("Project ".concat(projectName, " not found.")));

              case 15:
                _context12.prev = 15;

                if (!(project.repoUrl && !this.flags.ftp)) {
                  _context12.next = 23;
                  break;
                }

                repoUrlWithNicename = project.repoUrl.replace(/^https:\/\//, "https://".concat(project.user.userNicename, "@"));
                _context12.next = 20;
                return this.git.clone(repoUrlWithNicename);

              case 20:
                result = _context12.sent;
                _context12.next = 31;
                break;

              case 23:
                projectPath = path.join(process.cwd(), projectName);
                _context12.next = 26;
                return helpers.eraseDirectories(projectPath);

              case 26:
                query = this.flags.force ? '?force=true' : '';
                this.options.path = "/project/get/".concat(projectName).concat(query);
                _context12.next = 30;
                return helpers.downloadFromFTP(this.http, this.options, projectPath);

              case 30:
                result = _context12.sent;

              case 31:
                this.result.addAlert('green', 'Success', result);
                _context12.next = 37;
                break;

              case 34:
                _context12.prev = 34;
                _context12.t1 = _context12["catch"](15);
                this.result.addAlert('red', 'Error', "Could not download ".concat(projectName, ": ").concat(_context12.t1.message || _context12.t1));

              case 37:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this, [[15, 34]]);
      }));

      function get() {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "kill",
    value: function () {
      var _kill = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
        var projects, projectName, projectExists, killType, result;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.getWordpressProjects();

              case 2:
                projects = _context13.sent;

                if (!(projects.length === 0)) {
                  _context13.next = 5;
                  break;
                }

                return _context13.abrupt("return", this.result.addTextLine('You don\'t have any projects yet.'));

              case 5:
                projects = projects.map(function (p) {
                  return {
                    name: p.projectName
                  };
                });
                _context13.t0 = this.flags.name;

                if (_context13.t0) {
                  _context13.next = 11;
                  break;
                }

                _context13.next = 10;
                return helpers.createListPrompt('Choose project', projects);

              case 10:
                _context13.t0 = _context13.sent;

              case 11:
                projectName = _context13.t0;
                projectExists = projects.some(function (p) {
                  return p.name === projectName;
                });

                if (projectExists) {
                  _context13.next = 15;
                  break;
                }

                return _context13.abrupt("return", this.result.addTextLine("Project ".concat(projectName, " not found.")));

              case 15:
                killType = this.flags.remove ? 'rmkill' : 'kill';
                this.options.path = "/project/".concat(killType, "/").concat(projectName);
                this.result.liveTextLine('Fetching data...');
                _context13.prev = 18;
                _context13.next = 21;
                return this.http["delete"](this.options);

              case 21:
                result = _context13.sent;
                this.result.addAlert('green', 'Success', result.body);
                _context13.next = 28;
                break;

              case 25:
                _context13.prev = 25;
                _context13.t1 = _context13["catch"](18);
                this.result.addAlert('red', 'Error', "Could not kill ".concat(projectName, ": ").concat(_context13.t1.message));

              case 28:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this, [[18, 25]]);
      }));

      function kill() {
        return _kill.apply(this, arguments);
      }

      return kill;
    }()
  }, {
    key: "info",
    value: function () {
      var _info = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
        var projects, projectName, projectExists, result, _result, startedAt, killedAt, url, isUp;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.getWordpressProjects();

              case 2:
                projects = _context14.sent;

                if (!(projects.length === 0)) {
                  _context14.next = 5;
                  break;
                }

                return _context14.abrupt("return", this.result.addTextLine('You don\'t have any projects yet.'));

              case 5:
                projects = projects.map(function (p) {
                  return {
                    name: p.projectName
                  };
                });
                _context14.t0 = this.flags.name || this.args[0];

                if (_context14.t0) {
                  _context14.next = 11;
                  break;
                }

                _context14.next = 10;
                return helpers.createListPrompt('Choose project', projects);

              case 10:
                _context14.t0 = _context14.sent;

              case 11:
                projectName = _context14.t0;
                projectExists = projects.some(function (p) {
                  return p.name === projectName;
                });

                if (projectExists) {
                  _context14.next = 15;
                  break;
                }

                return _context14.abrupt("return", this.result.addTextLine("Project ".concat(projectName, " not found.")));

              case 15:
                this.options.path = "/project/info/".concat(projectName);
                this.result.liveTextLine('Fetching data...');
                _context14.prev = 17;
                _context14.next = 20;
                return this.http.get(this.options);

              case 20:
                result = _context14.sent;
                result = JSON.parse(result.body);
                _result = result, startedAt = _result.startedAt, killedAt = _result.killedAt, url = _result.url, isUp = _result.isUp;
                this.result.addAlert('turquoise', 'Status:', isUp ? 'running' : 'dead');
                this.result.addAlert('turquoise', isUp ? 'Started at:' : 'Killed at:', isUp ? startedAt : killedAt);

                if (isUp) {
                  this.result.addAlert('turquoise', 'App URL:', url);
                }

                _context14.next = 31;
                break;

              case 28:
                _context14.prev = 28;
                _context14.t1 = _context14["catch"](17);
                this.result.addAlert('red', 'Error:', _context14.t1.message);

              case 31:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this, [[17, 28]]);
      }));

      function info() {
        return _info.apply(this, arguments);
      }

      return info;
    }()
  }, {
    key: "logs",
    value: function () {
      var _logs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
        var _this3 = this;

        var projects, projectName, projectExists, _this$flags, lines, tail, follow, followQuery, linesQuery, http, request, result, parsedResult;

        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this.getWordpressProjects();

              case 2:
                projects = _context15.sent;

                if (!(projects.length === 0)) {
                  _context15.next = 5;
                  break;
                }

                return _context15.abrupt("return", this.result.addTextLine('You don\'t have any projects yet.'));

              case 5:
                projects = projects.map(function (p) {
                  return {
                    name: p.projectName
                  };
                });
                _context15.t0 = this.flags.name;

                if (_context15.t0) {
                  _context15.next = 11;
                  break;
                }

                _context15.next = 10;
                return helpers.createListPrompt('Choose project', projects);

              case 10:
                _context15.t0 = _context15.sent;

              case 11:
                projectName = _context15.t0;
                projectExists = projects.some(function (p) {
                  return p.name === projectName;
                });

                if (projectExists) {
                  _context15.next = 15;
                  break;
                }

                return _context15.abrupt("return", this.result.addTextLine("Project ".concat(projectName, " not found.")));

              case 15:
                _this$flags = this.flags, lines = _this$flags.lines, tail = _this$flags.tail, follow = _this$flags.follow;
                followQuery = follow ? '?follow=true' : '?follow=false';
                linesQuery = lines || tail ? "&lines=".concat(lines || tail) : '';
                this.options.path = "/project/logs/".concat(projectName).concat(followQuery).concat(linesQuery);
                this.result.liveTextLine('Fetching data...');

                if (!follow) {
                  _context15.next = 27;
                  break;
                }

                http = new HttpWrapper();
                request = http.createRawRequest(this.options, function (response) {
                  response.on('data', function (chunk) {
                    return _this3.result.liveTextLine(Buffer.from(chunk).toString('utf8'));
                  });
                  response.on('error', function (err) {
                    throw err;
                  });
                });
                request.on('error', function (err) {
                  throw err;
                });
                request.end();
                _context15.next = 38;
                break;

              case 27:
                _context15.prev = 27;
                _context15.next = 30;
                return this.http.get(this.options);

              case 30:
                result = _context15.sent;
                parsedResult = JSON.parse(result.body);
                this.result.addTextLine(parsedResult.logs);
                _context15.next = 38;
                break;

              case 35:
                _context15.prev = 35;
                _context15.t1 = _context15["catch"](27);
                this.result.addAlert('red', 'Error', "Could not fetch logs for ".concat(projectName, ": ").concat(_context15.t1.message));

              case 38:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this, [[27, 35]]);
      }));

      function logs() {
        return _logs.apply(this, arguments);
      }

      return logs;
    }()
  }, {
    key: "restart",
    value: function () {
      var _restart = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
        var projects, choices, projectName, project, result;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.getWordpressProjects();

              case 2:
                projects = _context16.sent;

                if (!(projects.length === 0)) {
                  _context16.next = 5;
                  break;
                }

                return _context16.abrupt("return", this.result.addTextLine('You don\'t have any projects yet.'));

              case 5:
                choices = projects.map(function (p) {
                  return {
                    name: p.projectName
                  };
                });
                _context16.t0 = this.flags.name;

                if (_context16.t0) {
                  _context16.next = 11;
                  break;
                }

                _context16.next = 10;
                return helpers.createListPrompt('Choose project', choices);

              case 10:
                _context16.t0 = _context16.sent;

              case 11:
                projectName = _context16.t0;
                project = projects.find(function (p) {
                  return p.projectName === projectName;
                });

                if (project) {
                  _context16.next = 15;
                  break;
                }

                return _context16.abrupt("return", this.result.addTextLine("Project ".concat(projectName, " not found.")));

              case 15:
                this.options.path = "/project/restart/".concat(projectName);
                this.result.liveTextLine('Fetching data...');
                _context16.prev = 17;
                _context16.next = 20;
                return this.http.post(this.options);

              case 20:
                result = _context16.sent;
                this.result.addAlert('green', 'Success', result.body);
                _context16.next = 27;
                break;

              case 24:
                _context16.prev = 24;
                _context16.t1 = _context16["catch"](17);
                this.result.addAlert('red', 'Error', "Could not restart project ".concat(projectName, ": ").concat(_context16.t1.message));

              case 27:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this, [[17, 24]]);
      }));

      function restart() {
        return _restart.apply(this, arguments);
      }

      return restart;
    }()
  }, {
    key: "run",
    value: function () {
      var _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
        var projects, choices, projectName, project, _project$projectMeta$, technology, result, _JSON$parse2, message;

        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return this.getWordpressProjects();

              case 2:
                projects = _context17.sent;

                if (!(projects.length === 0)) {
                  _context17.next = 5;
                  break;
                }

                return _context17.abrupt("return", this.result.addTextLine('You don\'t have any projects yet.'));

              case 5:
                choices = projects.map(function (p) {
                  return {
                    name: p.projectName
                  };
                });
                _context17.t0 = this.flags.name;

                if (_context17.t0) {
                  _context17.next = 11;
                  break;
                }

                _context17.next = 10;
                return helpers.createListPrompt('Choose project', choices);

              case 10:
                _context17.t0 = _context17.sent;

              case 11:
                projectName = _context17.t0;
                project = projects.find(function (p) {
                  return p.projectName === projectName;
                });

                if (project) {
                  _context17.next = 15;
                  break;
                }

                return _context17.abrupt("return", this.result.addTextLine("Project ".concat(projectName, " not found.")));

              case 15:
                _project$projectMeta$ = project.projectMeta.find(function (m) {
                  return m.metaKey === '_backend_technology';
                }), technology = _project$projectMeta$.metaValue;
                this.options.path = "/project/run/".concat(technology, "/").concat(projectName);
                this.result.liveTextLine('Fetching data...');
                _context17.prev = 18;
                _context17.next = 21;
                return this.http.post(this.options);

              case 21:
                result = _context17.sent;
                _JSON$parse2 = JSON.parse(result.body), message = _JSON$parse2.message;
                this.result.addTextLine(message);
                _context17.next = 29;
                break;

              case 26:
                _context17.prev = 26;
                _context17.t1 = _context17["catch"](18);
                this.result.addAlert('red', 'Error', "Could not run project ".concat(projectName, ": ").concat(_context17.t1.message));

              case 29:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this, [[18, 26]]);
      }));

      function run() {
        return _run.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: "getWordpressProjects",
    value: function () {
      var _getWordpressProjects = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
        var result;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                this.options.path = '/project';
                _context18.next = 3;
                return this.http.get(this.options);

              case 3:
                result = _context18.sent;
                return _context18.abrupt("return", JSON.parse(result.body).filter(function (p) {
                  return p.status === ProjectStatus.WORDPRESS;
                }).sort(function (a, b) {
                  return a.editDate < b.editDate;
                }));

              case 5:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function getWordpressProjects() {
        return _getWordpressProjects.apply(this, arguments);
      }

      return getWordpressProjects;
    }()
  }]);

  return WordpressReceiver;
}(Receiver);

module.exports = WordpressReceiver;