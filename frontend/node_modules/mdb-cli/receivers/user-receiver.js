'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Receiver = require('./receiver');

var AuthMethod = require('../models/auth-method');

var NormalAuthStrategy = require('./strategies/auth/normal-auth-strategy');

var GoogleAuthStrategy = require('./strategies/auth/google-auth-strategy');

var FacebookAuthStrategy = require('./strategies/auth/facebook-auth-strategy');

var TwitterAuthStrategy = require('./strategies/auth/twitter-auth-strategy');

var atob = require('atob');

var UserReceiver = /*#__PURE__*/function (_Receiver) {
  _inherits(UserReceiver, _Receiver);

  var _super = _createSuper(UserReceiver);

  function UserReceiver(context) {
    var _this;

    _classCallCheck(this, UserReceiver);

    _this = _super.call(this, context);
    _this.socialProvider = AuthMethod.Normal;
    _this.authStrategy = null;

    _this.context.registerNonArgFlags(['help']);

    _this.context.registerFlagExpansions({
      '-u': '--username',
      '-p': '--password',
      '-m': '--method',
      '-h': '--help'
    });

    _this.flags = _this.context.getParsedFlags();
    return _this;
  }

  _createClass(UserReceiver, [{
    key: "register",
    value: function () {
      var _register = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var err;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.setAuthStrategy();
                _context.next = 3;
                return this.authStrategy.register();

              case 3:
                err = _context.sent;

                if (err) {
                  this.result.addAlert('red', 'Error', err);
                } else {
                  this.result.addTextLine('Successfully registered.');
                }

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function register() {
        return _register.apply(this, arguments);
      }

      return register;
    }()
  }, {
    key: "login",
    value: function () {
      var _login = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var err;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.setSocialProvider();
                this.setAuthStrategy();
                _context2.next = 4;
                return this.authStrategy.login();

              case 4:
                err = _context2.sent;

                if (err) {
                  this.result.addAlert('red', 'Error', err);
                } else {
                  this.result.addTextLine('Successfully logged in.');
                }

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function login() {
        return _login.apply(this, arguments);
      }

      return login;
    }()
  }, {
    key: "logout",
    value: function () {
      var _logout = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var err;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.setAuthStrategy();
                _context3.next = 3;
                return this.authStrategy.logout();

              case 3:
                err = _context3.sent;

                if (err) {
                  this.result.addAlert('red', 'Error', err);
                } else {
                  this.result.addTextLine('Successfully logged out.');
                }

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function logout() {
        return _logout.apply(this, arguments);
      }

      return logout;
    }()
  }, {
    key: "whoami",
    value: function () {
      var _whoami = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var token, _token$split, _token$split2, jwtBody, username;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.context.authenticateUser();
                token = this.context.userToken;
                _token$split = token.split('.'), _token$split2 = _slicedToArray(_token$split, 2), jwtBody = _token$split2[1];
                username = JSON.parse(atob(jwtBody)).name;
                this.result.addTextLine(username);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function whoami() {
        return _whoami.apply(this, arguments);
      }

      return whoami;
    }()
  }, {
    key: "setSocialProvider",
    value: function setSocialProvider() {
      var supportedMethods = [AuthMethod.Google, AuthMethod.Facebook, AuthMethod.Twitter, AuthMethod.Normal];

      if (this.flags.method && !supportedMethods.includes(this.flags.method)) {
        throw new Error("Unsupported --method provided: ".concat(this.flags.method, ". Supported methods: ").concat(supportedMethods.join(', ')));
      } else if (this.flags.method) {
        this.socialProvider = this.flags.method;
      }
    }
  }, {
    key: "setAuthStrategy",
    value: function setAuthStrategy() {
      switch (this.socialProvider) {
        case AuthMethod.Google:
          return this.authStrategy = new GoogleAuthStrategy();

        case AuthMethod.Facebook:
          return this.authStrategy = new FacebookAuthStrategy();

        case AuthMethod.Twitter:
          return this.authStrategy = new TwitterAuthStrategy();

        case AuthMethod.Normal:
          return this.authStrategy = new NormalAuthStrategy(this.flags, this.result);

        default:
          return this.authStrategy = new NormalAuthStrategy(this.flags, this.result);
      }
    }
  }]);

  return UserReceiver;
}(Receiver);

module.exports = UserReceiver;