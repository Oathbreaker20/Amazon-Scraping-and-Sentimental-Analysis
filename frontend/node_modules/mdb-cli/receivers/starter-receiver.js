'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Receiver = require('./receiver');

var config = require('../config');

var StarterReceiver = /*#__PURE__*/function (_Receiver) {
  _inherits(StarterReceiver, _Receiver);

  var _super = _createSuper(StarterReceiver);

  function StarterReceiver(context) {
    var _this;

    _classCallCheck(this, StarterReceiver);

    _this = _super.call(this, context);

    _this.context.authenticateUser();

    _this.options = {
      hostname: config.host,
      headers: {
        Authorization: "Bearer ".concat(_this.context.userToken)
      }
    };

    _this.context.registerFlagExpansions({
      '-o': '--only'
    });

    _this.flags = _this.context.getParsedFlags();
    return _this;
  }

  _createClass(StarterReceiver, [{
    key: "list",
    value: function () {
      var _list = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var queryParamType, queryParamAvailable, _yield$this$http$get, response, starters, available, unavailable, i;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.result.liveTextLine('Fetching starters...');
                _context.prev = 1;

                this._validateOnlyFlag();

                queryParamType = this.flags.only ? "type=".concat(this.flags.only) : '';
                queryParamAvailable = !this.flags.all ? 'available=true' : '';
                this.options.path = "/packages/starters?".concat(queryParamType, "&").concat(queryParamAvailable);
                _context.next = 8;
                return this.http.get(this.options);

              case 8:
                _yield$this$http$get = _context.sent;
                response = _yield$this$http$get.body;
                starters = JSON.parse(response);
                available = [], unavailable = [];

                for (i = 0; i < starters.length; i++) {
                  if (starters[i].available) available.push(starters[i]);else unavailable.push(starters[i]);
                }

                this._printStartersMap('green', 'Available starters:', this._buildStartersMap(available));

                if (this.flags.all) {
                  this._printStartersMap('red', 'Unavailable starters:', this._buildStartersMap(unavailable));
                }

                _context.next = 20;
                break;

              case 17:
                _context.prev = 17;
                _context.t0 = _context["catch"](1);
                return _context.abrupt("return", this.result.addAlert('red', 'Error', "Could not fetch starters: ".concat(_context.t0.message)));

              case 20:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 17]]);
      }));

      function list() {
        return _list.apply(this, arguments);
      }

      return list;
    }()
  }, {
    key: "_validateOnlyFlag",
    value: function _validateOnlyFlag() {
      if (!!this.flags.only && !['frontend', 'backend', 'wordpress'].includes(this.flags.only)) {
        throw new Error('Invalid value for --only flag');
      }
    }
  }, {
    key: "_buildStartersMap",
    value: function _buildStartersMap(options) {
      return options.reduce(function (res, curr) {
        res["".concat(curr.category, " ").concat(curr.license)] = res["".concat(curr.category, " ").concat(curr.license)] || [];
        res["".concat(curr.category, " ").concat(curr.license)].push({
          name: curr.displayName,
          "short": curr.code,
          value: curr.code
        });
        return res;
      }, {});
    }
  }, {
    key: "_printStartersMap",
    value: function _printStartersMap(color, header, map) {
      this.result.addTextLine('');
      this.result.addAlert(color, header, '\n');

      for (var key in map) {
        this.result.addTextLine("---- ".concat(key, " ----"));

        var _iterator = _createForOfIteratorHelper(map[key]),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var starter = _step.value;
            this.result.addTextLine(starter.name);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        this.result.addTextLine('');
      }
    }
  }, {
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // TODO: implement
                this.result.addTextLine('This command is not implemented yet. In order to initialize a project you need to provide an entity, e.x: mdb frontend init');

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }]);

  return StarterReceiver;
}(Receiver);

module.exports = StarterReceiver;