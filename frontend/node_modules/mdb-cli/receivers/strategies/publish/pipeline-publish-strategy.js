'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var helpers = require('../../../helpers');

var config = require('../../../config');

var atob = require('atob');

var PipelinePublishStrategy = /*#__PURE__*/function () {
  function PipelinePublishStrategy(context, result, git, http, options) {
    _classCallCheck(this, PipelinePublishStrategy);

    this.context = context;
    this.result = result;
    this.packageJsonConfig = context.packageJsonConfig;
    this.flags = context.getParsedFlags();
    this.cwd = process.cwd();
    this.git = git;
    this.http = http;
    this.options = options;
  }

  _createClass(PipelinePublishStrategy, [{
    key: "publish",
    value: function () {
      var _publish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this = this;

        var currentBranch;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.git.currentBranch();

              case 2:
                currentBranch = _context.sent;
                return _context.abrupt("return", this.createJenkinsfile(currentBranch).then(function () {
                  return _this.git.status();
                }).then(function () {
                  return _this.confirmMerge(currentBranch);
                }).then(function () {
                  return _this.git.push("".concat(currentBranch, ":").concat(config.mdbgoPipelinePublicBranch));
                }).then(function () {
                  return _this.confirmSaveSettings();
                }).then(function () {
                  return _this.updateProjectStatus();
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function publish() {
        return _publish.apply(this, arguments);
      }

      return publish;
    }()
  }, {
    key: "createJenkinsfile",
    value: function () {
      var _createJenkinsfile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(currentBranch) {
        var created;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.result.liveTextLine('Jenkinsfile is required. Creating...');
                _context2.next = 3;
                return helpers.createJenkinsfile(this.cwd, false);

              case 3:
                created = _context2.sent;

                if (created) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return");

              case 6:
                this.result.liveTextLine('Jenkinsfile created. Committing...');
                _context2.next = 9;
                return this.git.commit('Jenkinsfile', 'Add Jenkinsfile');

              case 9:
                this.result.liveTextLine('Jenkinsfile commited. Pushing...');
                _context2.next = 12;
                return this.git.push(currentBranch);

              case 12:
                this.result.liveTextLine('Jenkinsfile pushed. Proceeding...');

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function createJenkinsfile(_x) {
        return _createJenkinsfile.apply(this, arguments);
      }

      return createJenkinsfile;
    }()
  }, {
    key: "confirmMerge",
    value: function () {
      var _confirmMerge = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(currentBranch) {
        var confirmed;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(currentBranch === config.mdbgoPipelinePublicBranch)) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return");

              case 2:
                _context3.next = 4;
                return helpers.createConfirmationPrompt("Your current branch is ".concat(currentBranch, ". Do you want to merge it into ").concat(config.mdbgoPipelinePublicBranch, "?"));

              case 4:
                confirmed = _context3.sent;

                if (confirmed) {
                  _context3.next = 7;
                  break;
                }

                throw new Error('Cannot proceed without merge.');

              case 7:
                _context3.next = 9;
                return this.git.checkout(config.mdbgoPipelinePublicBranch);

              case 9:
                _context3.next = 11;
                return this.git.pull(config.mdbgoPipelinePublicBranch);

              case 11:
                _context3.next = 13;
                return this.git.merge(currentBranch);

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function confirmMerge(_x2) {
        return _confirmMerge.apply(this, arguments);
      }

      return confirmMerge;
    }()
  }, {
    key: "confirmSaveSettings",
    value: function () {
      var _confirmSaveSettings = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var confirm;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!this.context.mdbConfig.getValue('publishMethod')) {
                  _context4.next = 2;
                  break;
                }

                return _context4.abrupt("return");

              case 2:
                _context4.next = 4;
                return helpers.createConfirmationPrompt('Do you want to use GitLab pipelines as a default publish method?');

              case 4:
                confirm = _context4.sent;

                if (confirm) {
                  this.context.mdbConfig.setValue('publishMethod', 'pipeline');
                  this.context.mdbConfig.save();
                  this.git.commit('.mdb', 'Update .mdb config');
                } else {
                  this.result.addAlert('green', 'Success', 'This time your project will be published using GitLab pipeline. We will remember to ask you again next time.');
                }

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function confirmSaveSettings() {
        return _confirmSaveSettings.apply(this, arguments);
      }

      return confirmSaveSettings;
    }()
  }, {
    key: "updateProjectStatus",
    value: function updateProjectStatus() {
      var repoUrl = this.git.getCurrentRemoteUrl();
      var domain = this.context.mdbConfig.getValue('domain');
      var projectName = this.context.mdbConfig.getValue('projectName');
      this.options.data = JSON.stringify({
        repoUrl: repoUrl,
        domain: domain
      });
      this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
      this.options.headers['Content-Type'] = 'application/json';
      this.options.path = "/project/save/".concat(projectName);
      return this.http.post(this.options);
    }
  }]);

  return PipelinePublishStrategy;
}();

module.exports = PipelinePublishStrategy;