'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var path = require('path');

var fs = require('fs');

var fse = require('fs-extra');

var Ora = require('ora');

var HttpWrapper = require('../../../utils/http-wrapper');

var config = require('../../../config');

var helpers = require('../../../helpers');

var FtpPublishStrategy = /*#__PURE__*/function () {
  function FtpPublishStrategy(context, result) {
    _classCallCheck(this, FtpPublishStrategy);

    this.userToken = context.userToken;
    this.context = context;
    this.result = result;
    this.flags = context.getParsedFlags();

    this._loadMetaData(context);

    this.cwd = process.cwd();
    this.sent = 0;
  }

  _createClass(FtpPublishStrategy, [{
    key: "publish",
    value: function () {
      var _publish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this._loadMetaData(this.context);

                return _context.abrupt("return", this.buildProject().then(function () {
                  return _this.uploadFiles();
                }));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function publish() {
        return _publish.apply(this, arguments);
      }

      return publish;
    }()
  }, {
    key: "_loadMetaData",
    value: function _loadMetaData(context) {
      this.packageJsonConfig = context.packageJsonConfig;
      this.metaData = {
        packageName: context.mdbConfig.getValue('meta.starter') || '',
        projectName: this.packageJsonConfig.name || context.mdbConfig.getValue('projectName') || '',
        starter: this.flags.variant || context.mdbConfig.getValue('meta.starter') || '',
        domain: this.packageJsonConfig.domainName || context.mdbConfig.getValue('domain') || '',
        platform: context.mdbConfig.getValue('backend.platform') || '',
        hash: context.mdbConfig.getValue('hash') || ''
      };
    }
  }, {
    key: "buildProject",
    value: function () {
      var _buildProject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var result, distPath, buildPath, packageJson, isAngular, isReact, isVue, angularJsonPath, angularJson, angularFolder, indexPath, indexHtml, toRename, appJsPath, appJsFile, _appJsFile, regex, vueConfigFile, vueConfigContent;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                result = '';
                distPath = path.join(this.cwd, 'dist');
                buildPath = path.join(this.cwd, 'build');
                packageJson = this.packageJsonConfig;

                if (!(!packageJson.scripts || !packageJson.scripts.build)) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return");

              case 6:
                isAngular = packageJson.dependencies && !!packageJson.dependencies['@angular/core'];
                isReact = packageJson.dependencies && !!packageJson.dependencies.react;
                isVue = packageJson.dependencies && !!packageJson.dependencies.vue;

                if (!isAngular) {
                  _context2.next = 27;
                  break;
                }

                angularJsonPath = path.join(this.cwd, 'angular.json');
                _context2.next = 13;
                return helpers.deserializeJsonFile(angularJsonPath);

              case 13:
                angularJson = _context2.sent;
                _context2.next = 16;
                return this.runBuildScript();

              case 16:
                result = _context2.sent;
                angularFolder = path.join('dist', angularJson.defaultProject);
                indexPath = path.join(this.cwd, angularFolder, 'index.html');
                indexHtml = fs.readFileSync(indexPath, 'utf8');
                indexHtml = indexHtml.replace(/<base href="\/">/g, '<base href=".">');
                fs.writeFileSync(indexPath, indexHtml, 'utf8');
                toRename = path.join(this.cwd, angularFolder);
                fse.moveSync(toRename, buildPath, {
                  overwrite: true
                });
                fse.moveSync(buildPath, distPath, {
                  overwrite: true
                });
                _context2.next = 57;
                break;

              case 27:
                if (!isReact) {
                  _context2.next = 43;
                  break;
                }

                appJsPath = path.join(this.cwd, 'src', 'App.js');

                if (fs.existsSync(appJsPath)) {
                  appJsFile = fs.readFileSync(appJsPath, 'utf8');
                  appJsFile = appJsFile.replace(/<Router/g, "<Router basename='/dist'");
                  fs.writeFileSync(appJsPath, appJsFile, 'utf8');
                }

                packageJson.homepage = "https://".concat(this.metaData.domain, "/dist/");
                _context2.next = 33;
                return helpers.serializeJsonFile('package.json', packageJson);

              case 33:
                _context2.next = 35;
                return this.runBuildScript();

              case 35:
                result = _context2.sent;

                if (fs.existsSync(appJsPath)) {
                  _appJsFile = fs.readFileSync(appJsPath, 'utf8');
                  regex = new RegExp("<Router basename='/dist'", 'g');
                  _appJsFile = _appJsFile.replace(regex, '<Router');
                  fs.writeFileSync(appJsPath, _appJsFile, 'utf8');
                }

                delete packageJson.homepage;
                _context2.next = 40;
                return helpers.serializeJsonFile('package.json', packageJson);

              case 40:
                if (fs.existsSync(buildPath)) {
                  fse.moveSync(buildPath, distPath, {
                    overwrite: true
                  });
                }

                _context2.next = 57;
                break;

              case 43:
                if (!isVue) {
                  _context2.next = 51;
                  break;
                }

                vueConfigFile = path.join(this.cwd, 'vue.config.js');

                if (!fs.existsSync(vueConfigFile)) {
                  vueConfigContent = 'module.exports = { publicPath: \'.\' }';
                  fs.writeFileSync(vueConfigFile, vueConfigContent, 'utf8');
                }

                _context2.next = 48;
                return this.runBuildScript();

              case 48:
                result = _context2.sent;
                _context2.next = 57;
                break;

              case 51:
                _context2.next = 53;
                return this.runBuildScript();

              case 53:
                result = _context2.sent;
                this.result.addAlert('yellow', 'Warning', 'This is not MDB JARV project and there is no guarantee that it will work properly after publishing. In case of problems, please write to our support https://mdbootstrap.com/support/.');

                if (!(!fs.existsSync(distPath) && !fs.existsSync(buildPath))) {
                  _context2.next = 57;
                  break;
                }

                throw new Error('Build folder not found.');

              case 57:
                this.result.addAlert('green', 'Success', result);

              case 58:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function buildProject() {
        return _buildProject.apply(this, arguments);
      }

      return buildProject;
    }()
  }, {
    key: "runBuildScript",
    value: function () {
      var _runBuildScript = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var directoryPath,
            _args3 = arguments;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                directoryPath = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : this.cwd;
                _context3.next = 3;
                return this.context.loadPackageManager();

              case 3:
                return _context3.abrupt("return", this.context.packageManager.build(directoryPath));

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function runBuildScript() {
        return _runBuildScript.apply(this, arguments);
      }

      return runBuildScript;
    }()
  }, {
    key: "uploadFiles",
    value: function uploadFiles() {
      var _this2 = this;

      var spinner = new Ora({
        text: 'Uploading files'
      });
      spinner.start();
      return new Promise(function (resolve, reject) {
        var headers = {
          'Authorization': "Bearer ".concat(_this2.userToken)
        };
        if (_this2.context.entity === 'backend') headers['x-mdb-cli-backend-technology'] = _this2.flags.platform || _this2.metaData.platform;
        if (_this2.context.entity === 'wordpress') headers['x-mdb-cli-wp-page'] = _this2.metaData.starter;
        headers['x-mdb-cli-project-name'] = _this2.metaData.projectName;
        headers['x-mdb-cli-package-name'] = _this2.metaData.packageName;
        headers['x-mdb-cli-domain-name'] = _this2.metaData.domain;
        headers['x-mdb-cli-dot-mdb-hash'] = _this2.metaData.hash;
        headers['x-mdb-cli-override'] = _this2.flags.override || '';
        var archive = helpers.archiveProject('zip', {
          zlib: {
            level: 9
          }
        });
        var http = new HttpWrapper();
        var request = http.createRequest({
          hostname: config.host,
          path: '/project/publish',
          method: 'POST',
          headers: headers
        }, function (err, response) {
          if (err) {
            spinner.stop();
            return reject({
              message: err.message,
              statusCode: err.statusCode
            });
          }

          _this2.convertToMb(archive.pointer());

          spinner.succeed("Uploading files | ".concat(_this2.sent, " Mb"));

          if (response.statusCode >= 200 && response.statusCode <= 299) {
            _this2.result.addTextLine("Sent ".concat(_this2.sent, " Mb"));
          }

          resolve(response);
        });
        archive.on('error', reject);
        archive.on('warning', function (warn) {
          return _this2.result.addAlert('yellow', 'Warning', warn);
        });
        archive.on('progress', function () {
          _this2.convertToMb(archive.pointer());

          spinner.text = "Uploading files | ".concat(_this2.sent, " Mb");
        });
        archive.pipe(request);
        archive.glob('**', {
          cwd: _this2.cwd,
          ignore: ['node_modules/**', '.git/**', '.gitignore', 'Dockerfile', '.dockerignore', '.idea/**'],
          dot: true
        });
        archive.finalize();
      });
    }
  }, {
    key: "convertToMb",
    value: function convertToMb(pointer) {
      var num = pointer / Math.pow(1024, 2);
      this.sent = num.toFixed(3);
    }
  }]);

  return FtpPublishStrategy;
}();

module.exports = FtpPublishStrategy;