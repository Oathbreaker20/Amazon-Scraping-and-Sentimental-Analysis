'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AuthStrategy = require('./auth-strategy');

var HttpWrapper = require('../../../utils/http-wrapper');

var config = require('../../../config');

var inquirer = require('inquirer');

var NormalAuthStrategy = /*#__PURE__*/function (_AuthStrategy) {
  _inherits(NormalAuthStrategy, _AuthStrategy);

  var _super = _createSuper(NormalAuthStrategy);

  function NormalAuthStrategy(flags, result) {
    var _this;

    _classCallCheck(this, NormalAuthStrategy);

    _this = _super.call(this);
    _this.result = result;
    _this.flags = flags;
    _this.options = {
      hostname: config.host,
      path: '/auth/login',
      headers: {
        'Content-Type': 'application/json'
      }
    };
    return _this;
  }

  _createClass(NormalAuthStrategy, [{
    key: "login",
    value: function () {
      var _login = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var http, result, _JSON$parse, _JSON$parse2, _JSON$parse2$, token, message, saved;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.askLoginCredentials();

              case 2:
                http = new HttpWrapper();
                _context.prev = 3;
                _context.next = 6;
                return http.post(this.options);

              case 6:
                result = _context.sent;
                _JSON$parse = JSON.parse(result.body), _JSON$parse2 = _slicedToArray(_JSON$parse, 1), _JSON$parse2$ = _JSON$parse2[0], token = _JSON$parse2$.token, message = _JSON$parse2$.message;

                if (!token) {
                  _context.next = 11;
                  break;
                }

                saved = this.saveToken(token);
                return _context.abrupt("return", saved ? null : 'Login failed. Could not save token.');

              case 11:
                return _context.abrupt("return", "Login failed: ".concat(message));

              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](3);
                return _context.abrupt("return", "Login failed: ".concat(_context.t0.message));

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 14]]);
      }));

      function login() {
        return _login.apply(this, arguments);
      }

      return login;
    }()
  }, {
    key: "askLoginCredentials",
    value: function () {
      var _askLoginCredentials = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var prompt, _ref, username, _ref2, password;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                prompt = inquirer.createPromptModule();

                if (!this.flags.username) {
                  _context2.next = 5;
                  break;
                }

                _context2.t0 = {
                  username: this.flags.username
                };
                _context2.next = 8;
                break;

              case 5:
                _context2.next = 7;
                return prompt([{
                  type: 'text',
                  message: 'Enter your MDB username',
                  name: 'username',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value);
                    /* istanbul ignore next */

                    return valid || 'Login must not be empty.';
                  }
                }]);

              case 7:
                _context2.t0 = _context2.sent;

              case 8:
                _ref = _context2.t0;
                username = _ref.username;

                if (!this.flags.password) {
                  _context2.next = 14;
                  break;
                }

                _context2.t1 = {
                  password: this.flags.password
                };
                _context2.next = 17;
                break;

              case 14:
                _context2.next = 16;
                return prompt([{
                  type: 'password',
                  message: 'Enter your MDB password',
                  name: 'password',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value);
                    /* istanbul ignore next */

                    return valid || 'Password must not be empty.';
                  }
                }]);

              case 16:
                _context2.t1 = _context2.sent;

              case 17:
                _ref2 = _context2.t1;
                password = _ref2.password;
                this.options.data = JSON.stringify({
                  username: username,
                  password: password
                });
                this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);

              case 21:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function askLoginCredentials() {
        return _askLoginCredentials.apply(this, arguments);
      }

      return askLoginCredentials;
    }()
  }, {
    key: "register",
    value: function () {
      var _register = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var http, result, _JSON$parse3, _JSON$parse4, _JSON$parse4$, token, loggedin, message, saved;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.askRegisterCredentials();

              case 2:
                this.result.liveTextLine('Processing...');
                http = new HttpWrapper();
                _context3.prev = 4;
                _context3.next = 7;
                return http.post(this.options);

              case 7:
                result = _context3.sent;
                _JSON$parse3 = JSON.parse(result.body), _JSON$parse4 = _slicedToArray(_JSON$parse3, 1), _JSON$parse4$ = _JSON$parse4[0], token = _JSON$parse4$.token, loggedin = _JSON$parse4$.loggedin, message = _JSON$parse4$.message;

                if (!loggedin) {
                  _context3.next = 12;
                  break;
                }

                saved = this.saveToken(token);
                return _context3.abrupt("return", saved ? null : 'Registration succeeded but the token could not be saved. Try to log in again.');

              case 12:
                return _context3.abrupt("return", "Could not log in: ".concat(message));

              case 15:
                _context3.prev = 15;
                _context3.t0 = _context3["catch"](4);
                return _context3.abrupt("return", "Registration failed: ".concat(_context3.t0.message));

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[4, 15]]);
      }));

      function register() {
        return _register.apply(this, arguments);
      }

      return register;
    }()
  }, {
    key: "askRegisterCredentials",
    value: function () {
      var _askRegisterCredentials = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var prompt, passwordValue, answers;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                prompt = inquirer.createPromptModule();
                _context4.next = 3;
                return prompt([{
                  type: 'text',
                  message: 'Enter your name',
                  name: 'name',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^[^()!|&*]+$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Name is invalid.';
                  }
                }, {
                  type: 'text',
                  message: 'Enter username',
                  name: 'username',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^[^()!|&*]+$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Username is invalid.';
                  }
                }, {
                  type: 'text',
                  message: 'Enter email',
                  name: 'email',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Please enter a valid email.';
                  }
                }, {
                  type: 'password',
                  message: 'Enter password',
                  name: 'password',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && typeof value === 'string' && value.length > 7;
                    passwordValue = value;
                    /* istanbul ignore next */

                    return valid || 'Password is invalid, it should contain at least 8 characters.';
                  }
                }, {
                  type: 'password',
                  message: 'Repeat password',
                  name: 'repeatPassword',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && typeof value === 'string' && value === passwordValue;
                    /* istanbul ignore next */

                    return valid || 'Passwords do not match.';
                  }
                }]);

              case 3:
                answers = _context4.sent;
                this.options.path = '/auth/register';
                this.options.data = JSON.stringify(answers);
                this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function askRegisterCredentials() {
        return _askRegisterCredentials.apply(this, arguments);
      }

      return askRegisterCredentials;
    }()
  }]);

  return NormalAuthStrategy;
}(AuthStrategy);

module.exports = NormalAuthStrategy;