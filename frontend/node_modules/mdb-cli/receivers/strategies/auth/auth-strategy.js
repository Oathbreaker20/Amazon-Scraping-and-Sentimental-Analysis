'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fs = require('fs');

var path = require('path');

var _require = require('../../../config'),
    tokenDir = _require.tokenDir,
    tokenFile = _require.tokenFile;

var AuthStrategy = /*#__PURE__*/function () {
  function AuthStrategy() {
    _classCallCheck(this, AuthStrategy);
  }

  _createClass(AuthStrategy, [{
    key: "register",
    value: function register() {
      throw new Error('You must implement the register() method!');
    }
  }, {
    key: "login",
    value: function login() {
      throw new Error('You must implement the login() method!');
    }
  }, {
    key: "logout",
    value: function logout() {
      return this.removeToken();
    }
  }, {
    key: "saveToken",
    value: function saveToken(userToken) {
      if (userToken) {
        var tokenPath = path.join(tokenDir, tokenFile);

        try {
          fs.mkdirSync(tokenDir, {
            recursive: true,
            mode: 493
          });
          fs.writeFileSync(tokenPath, userToken, {
            encoding: 'utf8',
            mode: 420
          });
        } catch (err) {
          return false;
        }

        return true;
      }

      return false;
    }
  }, {
    key: "removeToken",
    value: function removeToken() {
      var tokenPath = path.join(tokenDir, tokenFile);

      try {
        fs.unlinkSync(tokenPath);
        return null;
      } catch (e) {
        if (e.code === 'ENOENT') return 'You are not logged in.';
        return "Logout failed: ".concat(e.message);
      }
    }
  }]);

  return AuthStrategy;
}();

module.exports = AuthStrategy;