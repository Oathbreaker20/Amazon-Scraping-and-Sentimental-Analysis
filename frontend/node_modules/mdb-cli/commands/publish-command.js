'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Command = require('./command');

var FrontendReceiver = require('../receivers/frontend-receiver');

var BackendReceiver = require('../receivers/backend-receiver');

var WordpressReceiver = require('../receivers/wordpress-receiver');

var Entity = require('../models/entity');

var config = require('../config');

var PublishCommand = /*#__PURE__*/function (_Command) {
  _inherits(PublishCommand, _Command);

  var _super = _createSuper(PublishCommand);

  function PublishCommand(context) {
    var _this;

    _classCallCheck(this, PublishCommand);

    _this = _super.call(this, context);
    _this.receiver = null;
    _this.context = context;

    _this.setReceiver(context);

    return _this;
  }

  _createClass(PublishCommand, [{
    key: "execute",
    value: function () {
      var _execute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var flags;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                flags = this.context.getParsedFlags();

                if (!flags.help) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", this.help());

              case 3:
                _context.next = 5;
                return this.receiver.publish();

              case 5:
                this.printResult([this.receiver.result]);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function execute() {
        return _execute.apply(this, arguments);
      }

      return execute;
    }()
  }, {
    key: "setReceiver",
    value: function setReceiver(ctx) {
      var _this2 = this;

      if (!this.entity) {
        var type = ctx.mdbConfig.getValue('meta.type');

        if (type) {
          this.entity = type;
          ctx.entity = type;
        }
      }

      switch (this.entity) {
        case Entity.Backend:
          this.receiver = new BackendReceiver(ctx);
          break;

        case Entity.Wordpress:
          this.receiver = new WordpressReceiver(ctx);
          break;

        case Entity.Frontend:
          this.receiver = new FrontendReceiver(ctx);
          break;

        default:
          ctx.entity = Entity.Frontend;
          this.receiver = new FrontendReceiver(ctx);
          break;
      }

      this.receiver.result.on('mdb.cli.live.output', function (msg) {
        return _this2.printResult([msg]);
      });
    }
  }, {
    key: "help",
    value: function help() {
      this.results.addTextLine('Upload your current project to our remote server');
      this.results.addTextLine('\nUsage: mdb [entity] publish');
      this.results.addTextLine('\nAvailable entities: frontend (default), backend, wordpress');
      this.results.addTextLine('\nFlags:');
      this.results.addTextLine("  -p, --platform \tSpecify the backend platform. Allowed options: ".concat(config.backendTechnologies.join(', ')));
      this.results.addTextLine('  -t, --test     \tRun the "test" script defined in the "package.json" file before publishing');
      this.results.addTextLine('  -o, --open     \tOpen in default browser after publication');
      this.results.addTextLine('  -c, --advanced \tPerform an advanced WordPress publication');
      this.results.addTextLine('      --ftp,     \tDo not use MDB Go pipeline');
      this.printResult([this.results]);
    }
  }]);

  return PublishCommand;
}(Command);

module.exports = PublishCommand;