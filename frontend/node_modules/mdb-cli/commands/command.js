'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var OutputPrinter = require('../utils/output-printer');

var CommandResult = require('../utils/command-result');

var Command = /*#__PURE__*/function () {
  function Command(context) {
    _classCallCheck(this, Command);

    this.output = new OutputPrinter();
    this.entity = context.entity;
    this.args = context.args;
    this.flags = context.rawFlags;
    this.results = new CommandResult();
  }

  _createClass(Command, [{
    key: "execute",
    value: function execute() {
      throw new Error('This method should be implemented in child-classes.');
    }
    /**
     * @param results: CommandResult[]
     */

  }, {
    key: "printResult",
    value: function printResult(results) {
      this.output.print(results);
    }
  }]);

  return Command;
}();

module.exports = Command;