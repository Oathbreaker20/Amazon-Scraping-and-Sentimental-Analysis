'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('inquirer'),
    Separator = _require.Separator;

var config = require('../config');

var helpers = require('../helpers');

var Command = require('./command');

var StarterReceiver = require('../receivers/starter-receiver');

var FrontendReceiver = require('../receivers/frontend-receiver');

var BackendReceiver = require('../receivers/backend-receiver');

var WordpressReceiver = require('../receivers/wordpress-receiver');

var DatabaseReceiver = require('../receivers/database-receiver');

var BlankReceiver = require('../receivers/blank-receiver');

var RepoReceiver = require('../receivers/repo-receiver');

var Receiver = require('../receivers/receiver');

var Entity = require('../models/entity');

var InitCommand = /*#__PURE__*/function (_Command) {
  _inherits(InitCommand, _Command);

  var _super = _createSuper(InitCommand);

  function InitCommand(context) {
    var _this;

    _classCallCheck(this, InitCommand);

    _this = _super.call(this, context);
    _this.receiver = undefined;
    _this.context = context;
    _this.starterCode = '';

    _this.context.registerNonArgFlags(['wizard']);

    _this.context.registerFlagExpansions({
      '-w': '--wizard'
    });

    _this.setReceiver();

    return _this;
  }

  _createClass(InitCommand, [{
    key: "execute",
    value: function () {
      var _execute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this2 = this;

        var flags;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                flags = this.context.getParsedFlags();

                if (!flags.help) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", this.help());

              case 3:
                if (!flags.wizard) {
                  _context.next = 12;
                  break;
                }

                _context.next = 6;
                return this.startWizard();

              case 6:
                if (!this.receiver) {
                  _context.next = 9;
                  break;
                }

                _context.next = 9;
                return this.receiver.init(this.starterCode);

              case 9:
                this.printResult([this.receiver ? this.receiver.result : this.results]);
                _context.next = 26;
                break;

              case 12:
                if (!this.receiver) {
                  _context.next = 18;
                  break;
                }

                _context.next = 15;
                return this.receiver.init();

              case 15:
                this.printResult([this.receiver.result]);
                _context.next = 26;
                break;

              case 18:
                _context.next = 20;
                return this.detectReceiver();

              case 20:
                if (this.receiver) {
                  _context.next = 22;
                  break;
                }

                return _context.abrupt("return", this.help());

              case 22:
                this.receiver.result.on('mdb.cli.live.output', function (msg) {
                  return _this2.printResult([msg]);
                });
                _context.next = 25;
                return this.receiver.init(this.starterCode);

              case 25:
                this.printResult([this.receiver.result]);

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function execute() {
        return _execute.apply(this, arguments);
      }

      return execute;
    }()
  }, {
    key: "setReceiver",
    value: function setReceiver() {
      var _this3 = this;

      var ctx = this.context;

      switch (this.entity) {
        case Entity.Starter:
          this.receiver = new StarterReceiver(ctx);
          break;

        case Entity.Frontend:
          this.receiver = new FrontendReceiver(ctx);
          this.receiver.result.on('mdb.cli.live.output', function (msg) {
            return _this3.printResult([msg]);
          });
          break;

        case Entity.Backend:
          this.receiver = new BackendReceiver(ctx);
          break;

        case Entity.Database:
          this.receiver = new DatabaseReceiver(ctx);
          break;

        case Entity.Blank:
          this.receiver = new BlankReceiver(ctx);
          break;

        case Entity.Repo:
          this.receiver = new RepoReceiver(ctx);
          this.receiver.result.on('mdb.cli.live.output', function (msg) {
            return _this3.printResult([msg]);
          });
          break;

        case Entity.Wordpress:
          this.receiver = new WordpressReceiver(ctx);
          this.receiver.result.on('mdb.cli.live.output', function (msg) {
            return _this3.printResult([msg]);
          });
          break;
      }
    }
  }, {
    key: "startWizard",
    value: function () {
      var _startWizard = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var projectTypeChoices, projectType;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._getProjectTypeOptions();

              case 2:
                projectTypeChoices = _context2.sent;
                _context2.t0 = this.entity;

                if (_context2.t0) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 7;
                return helpers.createListPrompt('Choose project type:', projectTypeChoices);

              case 7:
                _context2.t0 = _context2.sent;

              case 8:
                projectType = _context2.t0;
                _context2.t1 = projectType;
                _context2.next = _context2.t1 === 'frontend' ? 12 : _context2.t1 === 'backend' ? 15 : _context2.t1 === 'blank' ? 18 : _context2.t1 === 'wordpress' ? 21 : 24;
                break;

              case 12:
                _context2.next = 14;
                return this.frontendWizardForm();

              case 14:
                return _context2.abrupt("break", 24);

              case 15:
                _context2.next = 17;
                return this.backendWizardForm();

              case 17:
                return _context2.abrupt("break", 24);

              case 18:
                this.entity = 'blank';
                this.setReceiver();
                return _context2.abrupt("break", 24);

              case 21:
                _context2.next = 23;
                return this.wordpressWizardForm();

              case 23:
                return _context2.abrupt("break", 24);

              case 24:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function startWizard() {
        return _startWizard.apply(this, arguments);
      }

      return startWizard;
    }()
  }, {
    key: "_getProjectTypeOptions",
    value: function _getProjectTypeOptions() {
      return [{
        name: 'Frontend',
        "short": 'Frontend',
        value: 'frontend'
      }, {
        name: 'Backend',
        "short": 'Backend',
        value: 'backend'
      }, {
        name: 'Blank',
        "short": 'Blank',
        value: 'blank'
      }, {
        name: 'Wordpress',
        "short": 'Wordpress',
        value: 'wordpress'
      }];
    }
  }, {
    key: "frontendWizardForm",
    value: function () {
      var _frontendWizardForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var frontChoices, frontTechnology, licenseChoices, licenseType, versionChoices, technology, mdbVersion, availableStarters, starter;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                frontChoices = [{
                  name: 'Standard',
                  "short": 'Standard',
                  value: 'Standard'
                }, {
                  name: 'jQuery',
                  "short": 'jQuery',
                  value: 'jQuery'
                }, {
                  name: 'Angular',
                  "short": 'Angular',
                  value: 'Angular'
                }, {
                  name: 'React',
                  "short": 'React',
                  value: 'React'
                }, {
                  name: 'Vue',
                  "short": 'Vue',
                  value: 'Vue'
                }];
                _context3.next = 3;
                return helpers.createListPrompt('Choose technology:', frontChoices);

              case 3:
                frontTechnology = _context3.sent;
                licenseChoices = [{
                  name: 'Free',
                  "short": 'Free',
                  value: 'Free'
                }];
                if (frontTechnology !== 'Standard') licenseChoices.push({
                  name: 'Pro',
                  "short": 'Pro',
                  value: 'Pro'
                });else licenseChoices.push({
                  name: 'Essential',
                  "short": 'Essential',
                  value: 'Essential'
                }, {
                  name: 'Advanced',
                  "short": 'Advanced',
                  value: 'Advanced'
                });
                _context3.next = 8;
                return helpers.createListPrompt('Choose license:', licenseChoices);

              case 8:
                licenseType = _context3.sent;
                versionChoices = [frontTechnology !== 'Standard' ? {
                  name: 'MDB 4',
                  "short": 'MDB 4',
                  value: 'MDB4'
                } : {
                  name: 'MDB 5',
                  "short": 'MDB 5',
                  value: 'MDB5'
                }];
                technology = 'frontend';
                _context3.next = 13;
                return helpers.createListPrompt('Choose MDB version:', versionChoices);

              case 13:
                mdbVersion = _context3.sent;
                _context3.next = 16;
                return this._getStartersOptions([], technology);

              case 16:
                availableStarters = _context3.sent;
                starter = availableStarters.find(function (o) {
                  return o.license === licenseType && o.category === mdbVersion && o.type === technology && o.displayName === frontTechnology;
                });

                if (starter.available) {
                  _context3.next = 22;
                  break;
                }

                return _context3.abrupt("return", this.results.addAlert('red', 'Error', 'You cannot create project with provided specification. Please visit https://mdbootstrap.com/my-orders/ or run `mdb starters -a` and make sure it is available for you.'));

              case 22:
                if (starter) {
                  _context3.next = 24;
                  break;
                }

                return _context3.abrupt("return", this.results.addAlert('red', 'Error', 'We could not initialize any starter with given criteria. Please run `mdb [entity] init` and choose one of the available starters.'));

              case 24:
                this.starterCode = starter.code;
                this.entity = technology;
                this.receiver = new FrontendReceiver(this.context);

              case 27:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function frontendWizardForm() {
        return _frontendWizardForm.apply(this, arguments);
      }

      return frontendWizardForm;
    }()
  }, {
    key: "backendWizardForm",
    value: function () {
      var _backendWizardForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var technology, backendChoices, backendTechnology, availableStarters, backendStarters, starter;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                technology = 'backend';
                backendChoices = [{
                  name: 'Node',
                  "short": 'Node',
                  value: 'node'
                }, {
                  name: 'PHP',
                  "short": 'PHP',
                  value: 'php'
                }];
                _context4.next = 4;
                return helpers.createListPrompt('Choose technology:', backendChoices);

              case 4:
                backendTechnology = _context4.sent;
                _context4.next = 7;
                return this._getStartersOptions([], technology);

              case 7:
                availableStarters = _context4.sent;
                backendStarters = availableStarters.filter(function (o) {
                  return o.type === technology && o.code.includes(backendTechnology) && o.available;
                }).map(function (o) {
                  return {
                    name: o.displayName,
                    "short": o.code,
                    value: o.code
                  };
                });

                if (backendStarters.length) {
                  _context4.next = 11;
                  break;
                }

                return _context4.abrupt("return", this.results.addAlert('red', 'Error', 'You cannot create project with provided specification. Please visit https://mdbootstrap.com/my-orders/ or run `mdb starters -a` and make sure it is available for you.'));

              case 11:
                _context4.next = 13;
                return helpers.createListPrompt('Choose starter:', backendStarters);

              case 13:
                starter = _context4.sent;

                if (starter) {
                  _context4.next = 16;
                  break;
                }

                return _context4.abrupt("return", this.results.addAlert('red', 'Error', 'We could not initialize any starter with given criteria. Please run `mdb [entity] init` and choose one of the available starters.'));

              case 16:
                this.starterCode = starter;
                this.entity = technology;
                this.receiver = new BackendReceiver(this.context);

              case 19:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function backendWizardForm() {
        return _backendWizardForm.apply(this, arguments);
      }

      return backendWizardForm;
    }()
  }, {
    key: "wordpressWizardForm",
    value: function () {
      var _wordpressWizardForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var technology, licenseChoices, licenseType, availableStarters, wordpressStarters, starter;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                technology = 'wordpress';
                licenseChoices = [{
                  name: 'Free',
                  "short": 'Free',
                  value: 'Free'
                }, {
                  name: 'Essential',
                  "short": 'Essential',
                  value: 'Essential'
                }];
                _context5.next = 4;
                return helpers.createListPrompt('Choose license:', licenseChoices);

              case 4:
                licenseType = _context5.sent;
                _context5.next = 7;
                return this._getStartersOptions([], technology);

              case 7:
                availableStarters = _context5.sent;
                wordpressStarters = availableStarters.filter(function (o) {
                  return o.type === technology && o.license === licenseType && o.available;
                }).map(function (o) {
                  return {
                    name: o.displayName,
                    "short": o.code,
                    value: o.code
                  };
                });

                if (wordpressStarters.length) {
                  _context5.next = 11;
                  break;
                }

                return _context5.abrupt("return", this.results.addAlert('red', 'Error', 'You cannot create project with provided specification. Please visit https://mdbootstrap.com/my-orders/ or run `mdb starters -a` and make sure it is available for you.'));

              case 11:
                _context5.next = 13;
                return helpers.createListPrompt('Choose starter:', wordpressStarters);

              case 13:
                starter = _context5.sent;

                if (starter) {
                  _context5.next = 16;
                  break;
                }

                return _context5.abrupt("return", this.results.addAlert('red', 'Error', 'We could not initialize any starter with given criteria. Please run `mdb [entity] init` and choose one of the available starters.'));

              case 16:
                this.starterCode = starter;
                this.entity = technology;
                this.receiver = new WordpressReceiver(this.context);

              case 19:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function wordpressWizardForm() {
        return _wordpressWizardForm.apply(this, arguments);
      }

      return wordpressWizardForm;
    }()
  }, {
    key: "detectReceiver",
    value: function () {
      var _detectReceiver = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var _this4 = this;

        var ctx, flags, options, choices, promptShownCount, starter, _starter, entity;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.results.on('mdb.cli.live.output', function (msg) {
                  return _this4.printResult([msg]);
                });
                ctx = this.context;
                flags = ctx.getParsedFlags();
                _context6.next = 5;
                return this._getStartersOptions(flags);

              case 5:
                options = _context6.sent;
                choices = this._buildStartersList(!flags.all ? options.filter(function (o) {
                  return ['frontend', 'backend', 'wordpress'].includes(o.type);
                }) : options);
                promptShownCount = 0;
                starter = {};

              case 9:
                if (!(promptShownCount++ >= 10)) {
                  _context6.next = 11;
                  break;
                }

                return _context6.abrupt("return", this.result.addTextLine('Please run `mdb starter ls` to see available packages.'));

              case 11:
                _context6.next = 13;
                return helpers.createListPrompt('Choose project to initialize', choices);

              case 13:
                this.starterCode = _context6.sent;

                if (!(this.starterCode === 'blank-starter')) {
                  _context6.next = 17;
                  break;
                }

                this.receiver = new BlankReceiver(ctx);
                return _context6.abrupt("return");

              case 17:
                starter = options.find(function (o) {
                  return o.code === _this4.starterCode;
                });

                if (!starter.available) {
                  _context6.next = 22;
                  break;
                }

                return _context6.abrupt("break", 24);

              case 22:
                this.results.liveAlert('yellow', 'Warning!', "You cannot create this project. Please visit https://mdbootstrap.com/my-orders/ and make sure it is available for you.");

              case 23:
                if (promptShownCount <= 10) {
                  _context6.next = 9;
                  break;
                }

              case 24:
                _starter = starter, entity = _starter.type;
                ctx.entity = entity;
                if (entity === 'frontend') this.receiver = new FrontendReceiver(ctx);else if (entity === 'backend') this.receiver = new BackendReceiver(ctx);else if (entity === 'wordpress') this.receiver = new WordpressReceiver(ctx);

              case 27:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function detectReceiver() {
        return _detectReceiver.apply(this, arguments);
      }

      return detectReceiver;
    }()
  }, {
    key: "_getStartersOptions",
    value: function () {
      var _getStartersOptions2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(flags) {
        var technology,
            options,
            result,
            _args7 = arguments;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                technology = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : null;
                this.context.authenticateUser();
                options = {
                  hostname: config.host,
                  path: "/packages/starters?".concat(technology ? 'type=' + technology + '&' : '').concat(!flags.all ? 'available=true' : ''),
                  headers: {
                    Authorization: "Bearer ".concat(this.context.userToken)
                  }
                };
                _context7.next = 5;
                return new Receiver(this.context).http.get(options);

              case 5:
                result = _context7.sent;
                return _context7.abrupt("return", JSON.parse(result.body));

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _getStartersOptions(_x) {
        return _getStartersOptions2.apply(this, arguments);
      }

      return _getStartersOptions;
    }()
  }, {
    key: "_buildStartersList",
    value: function _buildStartersList(options) {
      var starters = options.reduce(function (res, curr) {
        res["".concat(curr.category, " ").concat(curr.license)] = res["".concat(curr.category, " ").concat(curr.license)] || [];
        res["".concat(curr.category, " ").concat(curr.license)].push({
          name: curr.displayName,
          "short": curr.code,
          value: curr.code
        });
        return res;
      }, {});
      return Object.keys(starters).reduce(function (res, curr) {
        res.push.apply(res, [new Separator("---- ".concat(curr, " ----"))].concat(_toConsumableArray(starters[curr])));
        return res;
      }, [new Separator('---- Blank ----'), {
        name: 'Empty starter',
        value: 'blank-starter'
      }]);
    }
  }, {
    key: "help",
    value: function help() {
      this.results.addTextLine('Initialize new entity of a kind.');
      this.results.addTextLine('\nUsage: mdb [entity] init [options]');
      this.results.addTextLine('\nAvailable entities: starter, blank, frontend, backend, wordpress, database, repo');
      this.results.addTextLine('\nOptions:');
      this.results.addTextLine('   -n, --name      \tSet the name of your project right after initializing it');
      this.results.addTextLine("   -db, --database \tSet type of database. Avaliable options: ".concat(config.databases.join(', ')));
      this.results.addTextLine('   -w, --wizard   \tCreate new project with wizard');
      this.printResult([this.results]);
    }
  }]);

  return InitCommand;
}(Command);

module.exports = InitCommand;