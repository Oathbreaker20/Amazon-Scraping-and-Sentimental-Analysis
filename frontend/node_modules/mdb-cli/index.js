#! /usr/bin/env node
'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

require('babel-polyfill');

var path = require('path');

require('dotenv').config({
  path: path.resolve(__dirname, '.env')
});

if (!process.version.match(/v[1-9][0-9]/)) {
  require('console.table');
}

var CommandInvoker = require('./command-invoker');

var CommandResult = require('./utils/command-result');

var OutputPrinter = require('./utils/output-printer');

var Application = /*#__PURE__*/function () {
  function Application() {
    var _this = this;

    _classCallCheck(this, Application);

    this.invoker = new CommandInvoker();
    this.result = new CommandResult();
    this.output = new OutputPrinter();
    this.result.on('mdb.cli.live.output', function (msg) {
      _this.output.print([msg]);
    });
  }

  _createClass(Application, [{
    key: "run",
    value: function () {
      var _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                this.invoker.parse(process.argv);
                _context.next = 4;
                return this.invoker.executeCommand();

              case 4:
                _context.next = 10;
                break;

              case 6:
                _context.prev = 6;
                _context.t0 = _context["catch"](0);
                this.result.liveAlert('red', 'Error', "Could not process your request: ".concat(_context.t0.message || _context.t0));

                if (process.argv.some(function (arg) {
                  return arg === '--debug';
                })) {
                  console.trace(_context.t0);
                }

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 6]]);
      }));

      function run() {
        return _run.apply(this, arguments);
      }

      return run;
    }()
  }]);

  return Application;
}();

var app = new Application();
app.run();