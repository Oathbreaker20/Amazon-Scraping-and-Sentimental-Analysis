'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var config = require('../config');

var packageJson = require('../package.json');

var http = require('https');

var apiPath = config.env === 'dev' ? '/api-tst' : '/api';

var HttpWrapper = /*#__PURE__*/function () {
  function HttpWrapper() {
    _classCallCheck(this, HttpWrapper);
  }

  _createClass(HttpWrapper, [{
    key: "createRawRequest",
    value: function createRawRequest(options, callback) {
      if (options.headers) options.headers['x-mdb-cli-version'] = packageJson.version;else options.headers = {
        'x-mdb-cli-version': packageJson.version
      };
      if (options.hostname === config.host) options.path = "".concat(apiPath).concat(options.path);
      return http.request(options, function (response) {
        if (callback) {
          callback(response);
        }
      });
    }
  }, {
    key: "createRequest",
    value: function createRequest(options, callback) {
      if (options.headers) options.headers['x-mdb-cli-version'] = packageJson.version;else options.headers = {
        'x-mdb-cli-version': packageJson.version
      };
      if (options.hostname === config.host) options.path = "".concat(apiPath).concat(options.path);
      return http.request(options, function (response) {
        var result = '';
        response.on('data', function (chunk) {
          result += Buffer.from(chunk).toString('utf8');
        });
        response.on('end', function () {
          var statusCode = response.statusCode;

          if (statusCode >= 200 && statusCode < 400) {
            callback(null, {
              body: result,
              headers: response.headers,
              statusCode: statusCode
            });
          } else {
            callback({
              message: result,
              statusCode: statusCode
            }, null);
          }
        });
      });
    }
  }, {
    key: "request",
    value: function request(options) {
      if (options.headers) options.headers['x-mdb-cli-version'] = packageJson.version;else options.headers = {
        'x-mdb-cli-version': packageJson.version
      };
      if (options.hostname === config.host) options.path = "".concat(apiPath).concat(options.path);
      return new Promise(function (resolve, reject) {
        var request = http.request(options, function (response) {
          var result = '';
          response.on('data', function (chunk) {
            result += Buffer.from(chunk).toString('utf8');
          });
          response.on('end', function () {
            var statusCode = response.statusCode;

            if (statusCode >= 200 && statusCode < 400) {
              resolve({
                body: result,
                headers: response.headers,
                statusCode: statusCode
              });
            } else {
              reject({
                message: result,
                statusCode: statusCode
              });
            }
          });
        });
        request.on('error', function (error) {
          return reject(error);
        });
        var requestData = typeof options.data !== 'string' ? JSON.stringify(options.data) : options.data;
        request.write(requestData || '');
        request.end();
      });
    }
  }, {
    key: "get",
    value: function get(options) {
      options.method = 'GET';
      return this.request(options);
    }
  }, {
    key: "post",
    value: function post(options) {
      options.method = 'POST';
      return this.request(options);
    }
  }, {
    key: "put",
    value: function put(options) {
      options.method = 'PUT';
      return this.request(options);
    }
  }, {
    key: "delete",
    value: function _delete(options) {
      options.method = 'DELETE';
      return this.request(options);
    }
  }]);

  return HttpWrapper;
}();

module.exports = HttpWrapper;