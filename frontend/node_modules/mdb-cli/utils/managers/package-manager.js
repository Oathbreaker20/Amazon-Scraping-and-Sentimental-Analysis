'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var childProcess = require('child_process');

var CliStatus = require('../../models/cli-status');

var PackageManagers = require('../../models/package-managers');

var helpers = require('../../helpers');

var PackageManager = /*#__PURE__*/function () {
  function PackageManager() {
    _classCallCheck(this, PackageManager);

    this.isWindows = process.platform === 'win32';
  }

  _createClass(PackageManager, [{
    key: "init",
    value: function init() {
      throw new ReferenceError('Method must be implemented in a child-class');
    }
  }, {
    key: "build",
    value: function build() {
      throw new ReferenceError('Method must be implemented in a child-class');
    }
  }, {
    key: "test",
    value: function test() {
      throw new ReferenceError('Method must be implemented in a child-class');
    }
  }, {
    key: "update",
    value: function update() {
      throw new ReferenceError('Method must be implemented in a child-class');
    }
  }, {
    key: "_task",
    value: function _task(args, successMsg, errorMsg, cwd) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var task = childProcess.spawn(_this.cmdCommand, args, _objectSpread({
          cwd: cwd,
          stdio: 'inherit'
        }, _this.isWindows && {
          shell: true
        }));
        task.on('error', function (error) {
          return reject(error);
        });
        task.on('exit', function (code) {
          return code === CliStatus.SUCCESS ? resolve(successMsg) : reject(errorMsg);
        });
      });
    }
  }, {
    key: "cmdCommand",
    get: function get() {
      throw new Error('You must declare cmdCommand getter!');
    }
  }], [{
    key: "load",
    value: function () {
      var _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(manager) {
        var choices, NpmPackageManager, YarnPackageManager;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                choices = [PackageManagers.NPM, PackageManagers.YARN];

                if (manager) {
                  _context.next = 5;
                  break;
                }

                _context.next = 4;
                return helpers.createListPrompt('Which package manager do you use?', choices);

              case 4:
                manager = _context.sent;

              case 5:
                NpmPackageManager = require('./npm-package-manager');
                YarnPackageManager = require('./yarn-package-manager');
                _context.t0 = manager;
                _context.next = _context.t0 === PackageManagers.NPM ? 10 : _context.t0 === PackageManagers.YARN ? 11 : 12;
                break;

              case 10:
                return _context.abrupt("return", new NpmPackageManager());

              case 11:
                return _context.abrupt("return", new YarnPackageManager());

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function load(_x) {
        return _load.apply(this, arguments);
      }

      return load;
    }()
  }]);

  return PackageManager;
}();

module.exports = PackageManager;