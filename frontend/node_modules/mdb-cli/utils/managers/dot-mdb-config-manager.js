'use strict';

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fs = require('fs');

var path = require('path');

var DOT_MDB_SCHEME = require('../../models/dot-mdb');

var DotMdbConfigManager = /*#__PURE__*/function () {
  function DotMdbConfigManager() {
    _classCallCheck(this, DotMdbConfigManager);

    this.mdbConfig = {};

    this._load();
  }

  _createClass(DotMdbConfigManager, [{
    key: "getValue",
    value: function getValue(keyPath) {
      this.validateConfigKey(keyPath);
      var pathSplit = keyPath.split('.');

      var temp = _objectSpread({}, this.mdbConfig);

      var _iterator = _createForOfIteratorHelper(pathSplit),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var part = _step.value;

          if (!temp.hasOwnProperty(part)) {
            return undefined;
          }

          temp = temp[part];
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return temp;
    }
  }, {
    key: "setValue",
    value: function setValue(keyPath, value) {
      this.validateConfigKey(keyPath);

      this._setKeyPathValue(this.mdbConfig, keyPath, value);
    }
  }, {
    key: "unsetValue",
    value: function unsetValue(keyPath) {
      this.validateConfigKey(keyPath);

      this._unsetKeyPathValue(this.mdbConfig, keyPath);
    }
  }, {
    key: "validateConfigKey",
    value: function validateConfigKey(keyPath) {
      var pathSplit = keyPath.split('.');
      var temp = DOT_MDB_SCHEME;
      pathSplit.forEach(function (part) {
        if (!temp.hasOwnProperty(part)) {
          throw new Error("Invalid config: ".concat(keyPath));
        }

        temp = temp[part];
      });
    }
  }, {
    key: "save",
    value: function save() {
      var cwd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
      var settingsPath = path.join(cwd, '.mdb');

      try {
        fs.writeFileSync(settingsPath, JSON.stringify(this.mdbConfig, null, 2), 'utf8');
      } catch (e) {
        throw new Error("Could not save config file: ".concat(e));
      }
    }
  }, {
    key: "_load",
    value: function _load() {
      var cwd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
      var settingsPath = path.join(cwd, '.mdb');

      try {
        var config = fs.readFileSync(settingsPath, 'utf8');
        this.mdbConfig = JSON.parse(config);
      } catch (e) {
        this.mdbConfig = {};
      }
    }
  }, {
    key: "_unsetKeyPathValue",
    value: function _unsetKeyPathValue(object, keyPath) {
      var pathSplit = keyPath.split('.');

      if (pathSplit.length === 1) {
        if (object.hasOwnProperty(keyPath)) {
          delete object[keyPath];
        }

        return;
      }

      this._unsetKeyPathValue(object[pathSplit[0]] || {}, pathSplit.slice(1).join('.'));
    }
  }, {
    key: "_setKeyPathValue",
    value: function _setKeyPathValue(object, keyPath, value) {
      var pathSplit = keyPath.split('.');

      if (pathSplit.length === 1) {
        return object[keyPath] = value;
      } else {
        object[pathSplit[0]] = object[pathSplit[0]] || {};
      }

      this._setKeyPathValue(object[pathSplit[0]], pathSplit.slice(1).join('.'), value);
    }
  }]);

  return DotMdbConfigManager;
}();

module.exports = DotMdbConfigManager;