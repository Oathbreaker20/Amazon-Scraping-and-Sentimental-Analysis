'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var config = require('../../config');

var CliStatus = require('../../models/cli-status');

var childProcess = require('child_process');

var path = require('path');

var fs = require('fs');

var GitManager = /*#__PURE__*/function () {
  function GitManager() {
    _classCallCheck(this, GitManager);

    this.cmd = 'git';
    this.cwd = process.cwd();
    this.isWindows = process.platform === 'win32';
  }

  _createClass(GitManager, [{
    key: "checkout",
    value: function checkout() {
      var branchName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'master';
      return this._task(['checkout', '-B', branchName], "Switched to branch ".concat(branchName, "."), 'Problem with git branch change.');
    }
  }, {
    key: "clone",
    value: function clone(repoUrl) {
      var projectName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var gitArgs = projectName ? ['clone', repoUrl, projectName] : ['clone', repoUrl];
      return this._task(gitArgs, 'Success.', 'There were some errors. Please try again.');
    }
  }, {
    key: "commit",
    value: function () {
      var _commit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(filename, message) {
        var commitMsg;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return this._task(['add', filename], undefined, 'Problem with git add command.');

              case 3:
                _context.next = 8;
                break;

              case 5:
                _context.prev = 5;
                _context.t0 = _context["catch"](0);
                return _context.abrupt("return", Promise.reject(_context.t0));

              case 8:
                commitMsg = this.isWindows ? "\"".concat(message, "\"") : message;
                return _context.abrupt("return", this._task(['commit', '-m', commitMsg], undefined, 'Problem with git commit command.'));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 5]]);
      }));

      function commit(_x, _x2) {
        return _commit.apply(this, arguments);
      }

      return commit;
    }()
  }, {
    key: "currentBranch",
    value: function currentBranch() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var gitBranch = _this._spawn(['rev-parse', '--abbrev-ref', 'HEAD']);

        gitBranch.stdout.on('data', function (data) {
          return resolve(data.toString().trim());
        });
        gitBranch.stderr.on('data', function (data) {
          return reject(data.toString());
        });
      });
    }
  }, {
    key: "merge",
    value: function merge(branchName) {
      return this._task(['merge', branchName], undefined, 'Problem with git branch merge.');
    }
  }, {
    key: "pull",
    value: function pull(branchName) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        var gitPull = _this2._spawn(['pull', 'origin', branchName]);

        var result;
        gitPull.stdout.on('data', function (data) {
          result = "\n".concat(data);
          console.log(result);
        });
        gitPull.stderr.on('data', function (data) {
          result = "\n".concat(data);
          console.error(result);
        });
        gitPull.on('exit', function (code) {
          if (code === 0 || result.indexOf("Couldn't find remote ref ".concat(branchName)) !== -1) resolve();else reject('Problem with project fetching from GitLab.');
        });
      });
    }
  }, {
    key: "push",
    value: function push(branchName) {
      return this._task(['push', '-u', 'origin', branchName], undefined, 'Problem with uploading to GitLab.');
    }
  }, {
    key: "status",
    value: function status() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        var gitStatus = _this3._spawn(['status']);

        gitStatus.stdout.on('data', function (data) {
          if (data.indexOf('nothing to commit, working tree clean') !== -1) resolve();else reject('You have uncommited changes in your project, please commit and try again.');
        });
        gitStatus.stderr.on('data', function (data) {
          return reject(data.toString());
        });
      });
    }
  }, {
    key: "getCurrentRemoteUrl",
    value: function getCurrentRemoteUrl() {
      var gitConfigPath = path.join(this.cwd, '.git', 'config');
      var gitConfigContent = fs.existsSync(gitConfigPath) ? fs.readFileSync(gitConfigPath, 'utf8') : '';
      var lines = gitConfigContent.replace(/\t/g, '').split('\n');

      for (var i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('[remote')) {
          var _lines$split = lines[i + 1].split(' = '),
              _lines$split2 = _slicedToArray(_lines$split, 2),
              url = _lines$split2[1];

          if (url.startsWith(config.gitlabUrl)) return url;
        }
      }

      return '';
    }
  }, {
    key: "setOrigin",
    value: function setOrigin(origin) {
      return this._task(['remote', 'set-url', 'origin', origin], '', 'Problem with setting remote url.');
    }
  }, {
    key: "addOrigin",
    value: function addOrigin(origin) {
      return this._task(['remote', 'add', 'origin', origin], '', 'Problem with adding remote url.');
    }
  }, {
    key: "init",
    value: function init() {
      return this._task(['init'], 'Successfully initialized empty repository', 'Problem with initializing empty repository.');
    }
  }, {
    key: "_spawn",
    value: function _spawn(args) {
      var showOutput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var cwd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.cwd;
      return childProcess.spawn(this.cmd, args, _objectSpread(_objectSpread({
        cwd: cwd
      }, this.isWindows && {
        shell: true
      }), showOutput && {
        stdio: 'inherit'
      }));
    }
  }, {
    key: "_task",
    value: function _task(args, successMsg, errorMsg) {
      var _this4 = this;

      var cwd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.cwd;
      return new Promise(function (resolve, reject) {
        var task = _this4._spawn(args, true, cwd);

        task.on('error', function (error) {
          return reject(error);
        });
        task.on('exit', function (code) {
          return code === CliStatus.SUCCESS ? resolve(successMsg) : reject(errorMsg);
        });
      });
    }
  }]);

  return GitManager;
}();

module.exports = GitManager;