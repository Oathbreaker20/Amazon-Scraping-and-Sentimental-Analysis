'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fs = require('fs');

var path = require('path');

var PackageManager = require('./utils/managers/package-manager');

var PackageManagers = require('./models/package-managers');

var DotMdbConfigManager = require('./utils/managers/dot-mdb-config-manager');

var config = require('./config');

var Context = /*#__PURE__*/function () {
  function Context(entity, command, args, flags) {
    _classCallCheck(this, Context);

    this.userToken = '';
    this.mdbConfig = new DotMdbConfigManager();
    this.packageJsonConfig = {};
    this.packageManager = null;
    this._entity = entity;
    this._command = command;
    this._args = args;
    this._flags = flags;
    this._nonArgFlags = new Set(['all', 'force', 'help']);
    this._flagExpansions = new Map([['-h', '--help'], ['-a', '--all'], ['-f', '--force']]);

    this._loadPackageJsonConfig();
  }

  _createClass(Context, [{
    key: "getParsedFlags",
    value: function getParsedFlags() {
      var flags = this.rawFlags.slice();
      var parsedFlags = {};

      while (flags.length) {
        var f = this._consumeNextFlag(flags);

        if (!this._isFlag(f)) {
          throw new Error("Unknown flag: ".concat(f));
        }

        if (!this._isExpanded(f) && !this._isFlagExpansion(f)) {
          throw new Error("Unknown flag: ".concat(f));
        } else if (this._isFlagExpansion(f)) {
          f = this._flagExpansions.get(f);
        }

        f = f.slice(2);

        if (this._isNonArgFlag(f)) {
          parsedFlags[f] = true;
        } else {
          parsedFlags[f] = this._consumeNextFlag(flags);
        }
      }

      return parsedFlags;
    }
  }, {
    key: "registerNonArgFlags",
    value: function registerNonArgFlags() {
      var _this = this;

      var nonArgFlags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (nonArgFlags.length === 0) {
        throw new Error('No non-arg flags to register!');
      }

      nonArgFlags.forEach(function (naf) {
        return _this._nonArgFlags.add(naf);
      });
    }
  }, {
    key: "registerFlagExpansions",
    value: function registerFlagExpansions() {
      var _this2 = this;

      var flagExpansions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (Object.keys(flagExpansions).length === 0) {
        throw new Error('No flag expansions to register!');
      }

      Object.entries(flagExpansions).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            flag = _ref2[0],
            expansion = _ref2[1];

        return _this2._flagExpansions.set(flag, expansion);
      });
    }
  }, {
    key: "_consumeNextFlag",
    value: function _consumeNextFlag(flags) {
      return flags.shift();
    }
  }, {
    key: "_isFlagExpansion",
    value: function _isFlagExpansion(flag) {
      return this._flagExpansions.has(flag);
    }
  }, {
    key: "_isNonArgFlag",
    value: function _isNonArgFlag(flag) {
      return this._nonArgFlags.has(flag);
    }
  }, {
    key: "_isExpanded",
    value: function _isExpanded(flag) {
      return flag.startsWith('--');
    }
  }, {
    key: "_isFlag",
    value: function _isFlag(flag) {
      return flag.startsWith('-');
    }
  }, {
    key: "loadPackageManager",
    value: function () {
      var _loadPackageManager = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var manager, selectedManager;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.packageManager === null)) {
                  _context.next = 7;
                  break;
                }

                manager = this.mdbConfig.getValue('packageManager');
                _context.next = 4;
                return PackageManager.load(manager);

              case 4:
                this.packageManager = _context.sent;
                selectedManager = this.packageManager.cmdCommand;
                this.mdbConfig.setValue('packageManager', selectedManager);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadPackageManager() {
        return _loadPackageManager.apply(this, arguments);
      }

      return loadPackageManager;
    }()
  }, {
    key: "authenticateUser",
    value: function authenticateUser() {
      try {
        this.userToken = fs.readFileSync(path.join(config.tokenDir, config.tokenFile), 'utf8');
      } catch (e) {
        throw new Error('Please login first');
      }
    }
  }, {
    key: "setPackageJsonValue",
    value: function setPackageJsonValue(key, value) {
      var cwd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : process.cwd();
      var settingsPath = path.join(cwd, 'package.json');
      this.packageJsonConfig[key] = value;

      try {
        fs.writeFileSync(settingsPath, JSON.stringify(this.packageJsonConfig, null, 2), 'utf8');
      } catch (e) {
        throw new Error("Could not save package.json key '".concat(key, "': ").concat(e.message));
      }
    }
  }, {
    key: "_loadPackageJsonConfig",
    value: function _loadPackageJsonConfig() {
      var cwd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
      var settingsPath = path.join(cwd, 'package.json');

      try {
        var _config = fs.readFileSync(settingsPath, 'utf8');

        this.packageJsonConfig = JSON.parse(_config);
      } catch (e) {
        this.packageJsonConfig = {};
      }
    }
  }, {
    key: "entity",
    get: function get() {
      return this._entity;
    },
    set: function set(entity) {
      this._entity = entity;
    }
  }, {
    key: "command",
    get: function get() {
      return this._command;
    }
  }, {
    key: "args",
    get: function get() {
      return this._args;
    }
  }, {
    key: "rawFlags",
    get: function get() {
      return this._flags;
    }
  }]);

  return Context;
}();

module.exports = Context;